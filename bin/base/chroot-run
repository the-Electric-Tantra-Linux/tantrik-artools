#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}

#!/hint/bash

#{{{ mount

ignore_error() {
    "$@" 2>/dev/null
    return 0
}

trap_setup(){
    [[ $(trap -p EXIT) ]] && die 'Error! Attempting to overwrite existing EXIT trap'
    trap "$1" EXIT
}

chroot_mount() {
#     msg2 "mount: [%s]" "$2"
    mount "$@" && CHROOT_ACTIVE_MOUNTS=("$2" "${CHROOT_ACTIVE_MOUNTS[@]}")
}

chroot_add_resolv_conf() {
    local chrootdir=$1 resolv_conf=$1/etc/resolv.conf

    [[ -e /etc/resolv.conf ]] || return 0

    # Handle resolv.conf as a symlink to somewhere else.
    if [[ -L $chrootdir/etc/resolv.conf ]]; then
        # readlink(1) should always give us *something* since we know at this point
        # it's a symlink. For simplicity, ignore the case of nested symlinks.
        resolv_conf=$(readlink "$chrootdir/etc/resolv.conf")
        if [[ $resolv_conf = /* ]]; then
            resolv_conf=$chrootdir$resolv_conf
        else
            resolv_conf=$chrootdir/etc/$resolv_conf
        fi

        # ensure file exists to bind mount over
        if [[ ! -f $resolv_conf ]]; then
            install -Dm644 /dev/null "$resolv_conf" || return 1
        fi
    elif [[ ! -e $chrootdir/etc/resolv.conf ]]; then
        # The chroot might not have a resolv.conf.
        return 0
    fi

    chroot_mount /etc/resolv.conf "$resolv_conf" --bind
}

chroot_mount_conditional() {
    local cond=$1; shift
    if eval "$cond"; then
        chroot_mount "$@"
    fi
}

chroot_setup(){
    local mnt="$1" os="$2" args='-t tmpfs -o nosuid,nodev,mode=0755'
    $os && args='--bind'
    chroot_mount_conditional "! mountpoint -q '$mnt'" "$mnt" "$mnt" --bind &&
    chroot_mount proc "$mnt/proc" -t proc -o nosuid,noexec,nodev &&
    chroot_mount sys "$mnt/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
    ignore_error chroot_mount_conditional "[[ -d '$mnt/sys/firmware/efi/efivars' ]]" \
        efivarfs "$mnt/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
    chroot_mount udev "$mnt/dev" -t devtmpfs -o mode=0755,nosuid &&
    chroot_mount devpts "$mnt/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
    chroot_mount shm "$mnt/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
    chroot_mount /run "$mnt/run" ${args} &&
    chroot_mount tmp "$mnt/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
}

chroot_api_mount() {
    CHROOT_ACTIVE_MOUNTS=()
    trap_setup chroot_api_umount
    chroot_setup "$1" false
}

chroot_api_umount() {
    if (( ${#CHROOT_ACTIVE_MOUNTS[@]} )); then
#         msg2 "umount: [%s]" "${CHROOT_ACTIVE_MOUNTS[@]}"
        umount "${CHROOT_ACTIVE_MOUNTS[@]}"
    fi
    unset CHROOT_ACTIVE_MOUNTS
}

#}}}

#!/hint/bash

#{{{ chroot

orig_argv=("$0" "$@")
check_root() {
    local keepenv="$1"

    (( EUID == 0 )) && return
    if type -P sudo >/dev/null; then
        # shellcheck disable=2154
        exec sudo --preserve-env="$keepenv" -- "${orig_argv[@]}"
    else
        # shellcheck disable=2154
        exec su root -c "$(printf ' %q' "${orig_argv[@]}")"
    fi
}

is_btrfs() {
    [[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs ]]
}

is_subvolume() {
    [[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs && "$(stat -c %i "$1")" == 256 ]]
}

# is_same_fs() {
#     [[ "$(stat -c %d "$1")" == "$(stat -c %d "$2")" ]]
# }

subvolume_delete_recursive() {
    local subvol

    is_subvolume "$1" || return 0

    while IFS= read -d $'\0' -r subvol; do
        if ! subvolume_delete_recursive "$subvol"; then
            return 1
        fi
    done < <(find "$1" -mindepth 1 -xdev -depth -inum 256 -print0)
    if ! btrfs subvolume delete "$1" &>/dev/null; then
        error "Unable to delete subvolume %s" "$subvol"
        return 1
    fi

    return 0
}

# }}}

#!/hint/bash

CHROOTVERSION=0.10


# $1: chroot
kill_chroot_process(){
    local prefix="$1" flink pid name
    for root_dir in /proc/*/root; do
        flink=$(readlink "$root_dir")
        if [ "x$flink" != "x" ]; then
            if [ "x${flink:0:${#prefix}}" = "x$prefix" ]; then
                # this process is in the chroot...
                pid=$(basename "$(dirname "$root_dir")")
                name=$(ps -p "$pid" -o comm=)
                msg2 "Killing chroot process: %s (%s)" "$name" "$pid"
                kill -9 "$pid"
            fi
        fi
    done
    sleep 1
}

# umask might have been changed in /etc/profile
# ensure that sane default is set again
umask 0022

working_dir=''
files=()

mount_args=("-B:/etc/hosts:/etc/hosts")

usage() {
    echo "Usage: ${0##*/} [options] working-dir [run arguments]"
    echo "A wrapper around chroot. Provides support for pacman."
    echo
    echo ' options:'
    echo '    -C <file>     Location of a pacman config file'
    echo '    -M <file>     Location of a makepkg config file'
    echo '    -c <dir>      Set pacman cache'
    echo '    -f <file>     Copy file from the host to the chroot'
    echo '    -s            Do not run setarch'
    echo '    -b <list>     Bind mountargs'
    echo '                  List format [mntarg1:src1:dest1 ... mntargN:srcN:destN]'
    echo '    -h            This message'
    exit 1
}

opts='hC:M:c:b:f:s'

while getopts ${opts} arg; do
    case "${arg}" in
        C) pacman_conf="$OPTARG" ;;
        M) makepkg_conf="$OPTARG" ;;
        c) cache_dirs+=("$OPTARG") ;;
        f) files+=("$OPTARG") ;;
        s) nosetarch=1 ;;
        b) bindmounts+=("$OPTARG"); mount_args+=(${bindmounts[@]}) ;;
        h|?) usage ;;
        *) error "invalid argument '$arg'"; usage ;;
    esac
done
shift $(( OPTIND - 1 ))

(( $# < 1 )) && die 'You must specify a directory.'

check_root

working_dir=$(readlink -f "$1")
shift 1

[[ -z $working_dir ]] && die 'Please specify a working directory.'

if (( ${#cache_dirs[@]} == 0 )); then
    mapfile -t cache_dirs < <(pacman-conf --config "${pac_conf:-$working_dir/etc/pacman.conf}" CacheDir)
fi

# shellcheck disable=2016
host_mirrors=($(pacman-conf --repo world Server 2> /dev/null | sed -r 's#(.*/)world/os/.*#\1$repo/os/$arch#'))

for host_mirror in "${host_mirrors[@]}"; do
    if [[ $host_mirror == *file://* ]]; then
        # shellcheck disable=2016
        host_mirror=$(echo "$host_mirror" | sed -r 's#file://(/.*)/\$repo/os/\$arch#\1#g')
        in_array "$host_mirror" "${cache_dirs[@]}" || cache_dirs+=("$host_mirror")
    fi
done

while read -r line; do
    # shellcheck disable=2016
    mapfile -t lines < <(pacman-conf --config "${pac_conf:-$working_dir/etc/pacman.conf}" \
        --repo "$line" Server | sed -r 's#(.*/)[^/]+/os/.+#\1#')
    for line in "${lines[@]}"; do
        if [[ $line = file://* ]]; then
            line=${line#file://}
            in_array "$line" "${cache_dirs[@]}" || cache_dirs+=("$line")
        fi
    done
done < <(pacman-conf --config "${pac_conf:-$working_dir/etc/pacman.conf}" --repo-list)

copy_hostconf () {
    unshare --fork --pid gpg --homedir "$working_dir"/etc/pacman.d/gnupg/ --no-permission-warning --quiet --batch --import --import-options import-local-sigs "$(pacman-conf GpgDir)"/pubring.gpg >/dev/null 2>&1
    pacman-key --gpgdir "$working_dir"/etc/pacman.d/gnupg/ --import-trustdb "$(pacman-conf GpgDir)" >/dev/null 2>&1

    printf 'Server = %s\n' "${host_mirrors[@]}" >"$working_dir/etc/pacman.d/mirrorlist"

    [[ -n $pacman_conf ]] && cp "$pacman_conf" "${working_dir}/etc/pacman.conf"

    [[ -n $makepkg_conf ]] && cp "$makepkg_conf" "${working_dir}/etc/makepkg.conf"

    local file
    for file in "${files[@]}"; do
        mkdir -p "$(dirname "$working_dir$file")"
        cp -T "$file" "$working_dir$file"
    done

    sed -r "s|^#?\\s*CacheDir.+|CacheDir = ${cache_dirs[*]}|g" -i "${working_dir}/etc/pacman.conf"
}

mount_args+=("-B:${cache_dirs[0]//:/\\:}:${cache_dirs[0]//:/\\:}")

for cache_dir in "${cache_dirs[@]:1}"; do
    mount_args+=("-Br:${cache_dir//:/\\:}:${cache_dir//:/\\:}")
done

chroot_extra_mount() {
    chroot_add_resolv_conf "${working_dir}"

    for arg in "${mount_args[@]}"; do
        local flag=${arg%%:*} dest=${arg##*:} src=${arg%:*}
        src=${src#*:}
        chroot_mount "${src}" "${working_dir}${dest}" "${flag}"
    done
}

umask 0022

# Sanity check
if [[ ! -f "$working_dir/.artools" ]]; then
    die "'%s' does not appear to be an artix chroot." "$working_dir"
elif [[ $(cat "$working_dir/.artools") != "${CHROOTVERSION}" ]]; then
    die "chroot '%s' is not at version %s. Please rebuild." "$working_dir" "${CHROOTVERSION}"
fi

chroot_api_mount "${working_dir}" || die "failed to setup API filesystems in chroot %s" "${working_dir}"

chroot_extra_mount

copy_hostconf

eval "$(grep '^CARCH=' "$working_dir/etc/makepkg.conf")"

[[ -z $nosetarch ]] || unset CARCH

if [[ -f "/usr/share/artools/setarch-aliases.d/${CARCH}" ]]; then
	read -r set_arch < "/usr/share/artools/setarch-aliases.d/${CARCH}"
else
	set_arch="${CARCH}"
fi

${CARCH:+setarch "${set_arch}"} chroot "${working_dir}" "$@"

ret=$?

kill_chroot_process "${working_dir}"

exit $ret
