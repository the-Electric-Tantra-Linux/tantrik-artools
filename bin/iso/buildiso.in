#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

m4_include(lib/util-base.sh)
m4_include(lib/util-iso.sh)
m4_include(lib/base/message.sh)
m4_include(lib/base/common.sh)
m4_include(lib/base/chroot.sh)
m4_include(lib/iso/mount.sh)
m4_include(lib/iso/services.sh)
m4_include(lib/base/yaml.sh)
m4_include(lib/iso/calamares.sh)
m4_include(lib/iso/config.sh)
m4_include(lib/iso/firmware.sh)
m4_include(lib/iso/dracut.sh)
m4_include(lib/iso/initcpio.sh)
m4_include(lib/iso/grub.sh)
m4_include(lib/iso/squash.sh)
m4_include(lib/iso/iso.sh)
m4_include(lib/iso/profile.sh)
m4_include(lib/iso/trap.sh)

clean_up_chroot(){
    local path mnt="$1"
    msg2 "Cleaning [%s]" "${mnt##*/}"

    path=$mnt/boot
    if [[ -d "$path" ]]; then
        find "$path" -name 'initramfs*.img' -delete &> /dev/null
    fi
    path=$mnt/var/lib/pacman/sync
    if [[ -d $path ]];then
        find "$path" -type f -delete &> /dev/null
    fi
    path=$mnt/var/cache/pacman/pkg
    if [[ -d $path ]]; then
        find "$path" -type f -delete &> /dev/null
    fi
    path=$mnt/var/log
    if [[ -d $path ]]; then
        find "$path" -type f -delete &> /dev/null
    fi
    path=$mnt/var/tmp
    if [[ -d $path ]];then
        find "$path" -mindepth 1 -delete &> /dev/null
    fi
    path=$mnt/tmp
    if [[ -d $path ]];then
        find "$path" -mindepth 1 -delete &> /dev/null
    fi
    # shellcheck disable=2035
    find "$mnt" -name *.pacnew -name *.pacsave -name *.pacorig -delete
    if [[ -f "$mnt/boot/grub/grub.cfg" ]]; then
        rm "$mnt"/boot/grub/grub.cfg
    fi
    if [[ -f "$mnt/etc/machine-id" ]]; then
        rm "$mnt"/etc/machine-id
    fi
}

copy_overlay(){
    local src="$1" dest="$2"
    if [[ -e "$src" ]];then
        msg2 "Copying [%s] ..." "${src##*/}"
        cp -LR "$src"/* "$dest"
    fi
}

make_rootfs() {
    if [[ ! -e "${work_dir}"/rootfs.lock ]]; then
        msg "Prepare [Base installation] (rootfs)"
        local rootfs="${work_dir}/rootfs"

        prepare_dir "${rootfs}"

        basestrap "${basestrap_args[@]}" "${rootfs}" "${packages[@]}"

        copy_overlay "${root_overlay}" "${rootfs}"

        [[ -z ${live_list} ]] && configure_chroot "${rootfs}"

        clean_up_chroot "${rootfs}"

        : > "${work_dir}"/rootfs.lock

        msg "Done [Base installation] (rootfs)"
    fi
}

make_livefs() {
    if [[ ! -e ${work_dir}/livefs.lock ]]; then
        msg "Prepare [Live installation] (livefs)"
        local livefs="${work_dir}/livefs"

        prepare_dir "${livefs}"

        mount_overlayfs "${livefs}" "${work_dir}"

        basestrap "${basestrap_args[@]}" "${livefs}" "${packages[@]}"

        copy_overlay "${live_overlay}" "${livefs}"

        configure_chroot "${livefs}"

        umount_overlayfs

        clean_up_chroot "${livefs}"

        : > "${work_dir}"/livefs.lock

        msg "Done [Live installation] (livefs)"
    fi
}

make_bootfs() {
    if [[ ! -e ${work_dir}/bootfs.lock ]]; then
        msg "Prepare [/iso/boot]"

        prepare_dir "${iso_root}/boot"

        cp "${work_dir}"/rootfs/boot/vmlinuz* "${iso_root}"/boot/vmlinuz-"${arch}"

        local bootfs="${work_dir}/bootfs"

        mount_overlayfs "${bootfs}" "${work_dir}"

        if "${use_dracut}"; then
            prepare_initramfs_dracut "${bootfs}"
        else
            prepare_initramfs_mkinitcpio "${bootfs}"
        fi

        umount_overlayfs

        rm -R "${bootfs}"
        : > "${work_dir}"/bootfs.lock
        msg "Done [/iso/boot]"
    fi
}

make_grub(){
    if [[ ! -e ${work_dir}/grub.lock ]]; then
        msg "Prepare [/iso/boot/grub]"

        local layer=${work_dir}/rootfs
        [[ -n ${live_list} ]] && layer=${work_dir}/livefs

        prepare_grub "${work_dir}/rootfs" "$layer"

        if ${use_dracut}; then
            configure_grub_dracut
        else
            configure_grub_mkinitcpio
        fi

        : > "${work_dir}"/grub.lock
        msg "Done [/iso/boot/grub]"
    fi
}

gen_iso_fn(){
    local vars=("artix") name
    vars+=("${profile}")
    vars+=("${INITSYS}")
    case "${repo}" in
        'gremlins'|'goblins') vars+=("${repo}") ;;
    esac
    vars+=("${ISO_VERSION}")
    vars+=("${arch}")
    for n in "${vars[@]}"; do
        name=${name:-}${name:+-}${n}
    done
    echo "$name"
}

prepare_build(){
    load_profile

    case "${repo}" in
        'gremlins'|'goblins') repo="${repo}" ;;
        *) repo=default ;;
    esac

    get_pacman_conf "${repo}"

    iso_file=$(gen_iso_fn).iso

    iso_label="ARTIX_$(date +%Y%m)"

    basestrap_args+=(-C "${pacman_conf}")
    work_dir=${chroots_iso}/${profile}/artix

    iso_dir="${ISO_POOL}/${profile}"

    iso_root=${chroots_iso}/${profile}/iso
    live_dir=/LiveOS

    mnt_dir=${chroots_iso}/${profile}/mnt

    if [[ -n "${GPG_KEY}" ]]; then
        ${use_dracut} || export_gpg_publickey
    fi
}

display_settings(){
    msg "OPTIONS:"
    msg2 "profile: %s" "${profile}"
    msg2 "INITSYS: %s" "${INITSYS}"
    [[ -n ${GPG_KEY} ]] && msg2 "GPG_KEY: %s" "${GPG_KEY}"

    msg "ISO SETTINGS:"
    msg2 "ISO_VERSION: %s" "${ISO_VERSION}"
    msg2 "COMPRESSION: %s" "${COMPRESSION}"
    [[ "${COMPRESSION}" == 'zstd' ]] && msg2 "COMPRESSION_LEVEL: %s" "${COMPRESSION_LEVEL}"

    msg "BUILD:"
    show_profile
}

mk_squash(){
    make_sfs "${work_dir}/rootfs"
    if [[ -d "${work_dir}/livefs" ]]; then
        make_sfs "${work_dir}/livefs"
    fi
}

mk_iso(){
    touch "${iso_root}/.artix"
    msg "Making bootable image"
    # Sanity checks
    [[ ! -d "${iso_root}" ]] && return 1
    if [[ -f "${iso_dir}/${iso_file}" ]]; then
        msg2 "Removing existing bootable image..."
        rm -rf "${iso_dir}/${iso_file}"
    fi
    assemble_iso
    chown -R "${owner}:$(id --group "${owner}")" "${iso_dir}"
}

mk_boot(){
    run_safe "make_bootfs"
    run_safe "make_grub"
}

mk_chroots(){
    load_pkgs "${root_list}"
    run_safe "make_rootfs"
    if [[ -n ${live_list} ]]; then
        load_pkgs "${live_list}"
        run_safe "make_livefs"
    fi
}

build(){
    msg "Start building [%s]" "${profile}"
    if ${clean_first};then
        for copy in "${work_dir}"/*; do
            [[ -d $copy ]] || continue
            msg2 "Deleting chroot copy '%s'..." "$(basename "${copy}")"

            lock 9 "$copy.lock" "Locking chroot copy '%s'" "$copy"

            subvolume_delete_recursive "${copy}"
            rm -rf --one-file-system "${copy}"
        done
        lock_close 9

        rm -rf --one-file-system "${work_dir}"

        msg "Deleting isoroot [%s] ..." "${iso_root##*/}"
        rm -rf --one-file-system "${iso_root}"
    fi

    if ${chroot_only}; then
        mk_chroots
        warning "Continue squash: %s -p %s -sc ..." "${cmd}" "${profile}"
        exit 1
    elif ${boot_only}; then
        mk_boot
        warning "Continue iso: %s -p %s -zc ..." "${cmd}" "${profile}"
        exit 1
    elif ${squash_only}; then
        mk_squash
        warning "Continue boot: %s -p %s -bc ..." "${cmd}" "${profile}"
        exit 1
    elif ${iso_only}; then
        [[ ! -d ${work_dir} ]] && die "Create chroot: %s -p %s -x" "${cmd}" "${profile}"
        mk_iso
    else
        mk_chroots
        mk_boot
        mk_squash
        mk_iso
    fi
    msg "Finished building [%s]" "${profile}"
}

clean_first=true
pretend=false
chroot_only=false
iso_only=false
persist=false
use_dracut=false
squash_only=false
boot_only=false

basestrap_args=(-GMc)
cmd=${0##*/}

repo=${cmd##*-}
owner=${SUDO_USER:-$USER}
profile='base'
chroots_iso="${CHROOTS_DIR}/buildiso"
arch=$(uname -m)

usage() {
    echo "Usage: ${cmd} [options]"
    echo "    -p <profile>       Profile [default: ${profile}]"
    echo '    -r <dir>           Chroots directory'
    echo "                       [default: ${chroots_iso}]"
    echo '    -t <dir>           Target directory'
    echo "                       [default: ${ISO_POOL}]"
    echo '    -i <name>          Init system to use'
    echo "                       [default: ${INITSYS}]"
    echo '    -g <key>           The gpg key for img signing'
    echo "                       [default: none]"
    echo '    -m                 Set SquashFS image mode to persistence'
    echo '    -c                 Disable clean work dir'
    echo '    -x                 Build chroot only'
    echo '    -s                 Squash chroot only'
    echo '    -b                 Generate iso boot only'
    echo '    -z                 Generate iso only'
    echo '                       Requires pre built images (-x)'
    echo '    -d                 Use dracut instead of mkinitcpio for iso initramfs'
    echo '    -q                 Query settings and pretend build'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit "$1"
}

opts='p:r:t:i:g:czsbxmdqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) profile="$OPTARG" ;;
        r) chroots_iso="$OPTARG" ;;
        t) ISO_POOL="$OPTARG" ;;
        i) INITSYS="$OPTARG" ;;
        g) GPG_KEY="$OPTARG" ;;
        c) clean_first=false ;;
        x) chroot_only=true ;;
        z) iso_only=true ;;
        s) squash_only=true ;;
        b) boot_only=true ;;
        m) persist=true ;;
        d) use_dracut=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

prepare_build

${pretend} && display_settings && exit 1

check_root

prepare_dir "${mnt_dir}"
prepare_dir "${iso_dir}"
prepare_dir "${iso_root}"

prepare_traps

build
