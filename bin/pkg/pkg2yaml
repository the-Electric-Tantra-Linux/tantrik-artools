#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}

#!/hint/bash

#{{{ yaml

write_yaml_header(){
    printf '%s' '---'
}

write_empty_line(){
    printf '\n%s\n' ' '
}

write_yaml_map(){
    local ident="$1" key="$2" val="$3"
    printf "\n%${ident}s%s: %s\n" '' "$key" "$val"
}

write_yaml_seq(){
    local ident="$1" val="$2"
    printf "\n%${ident}s- %s\n" '' "$val"
}

write_yaml_seq_map(){
    local ident="$1" key="$2" val="$3"
    printf "\n%${ident}s- %s: %s\n" '' "$key" "$val"
}

#}}}


#{{{ functions

print_package_names() {
    local version=$(get_full_version)
    local architecture pkg
    for pkg in ${pkgname[@]}; do
        architecture=$(get_pkg_arch $pkg)
        printf "%s/%s-%s-%s%s\n" "$PKGDEST" "$pkg" "$version" "$architecture" "$PKGEXT"
    done
}

print_debug_package_names() {
    local version=$(get_full_version)
    local architecture
    if check_option "debug" "y" && check_option "strip" "y"; then
        architecture=$(get_pkg_arch)
        printf "%s/%s-%s-%s-%s%s\n" "$PKGDEST" "$pkgbase" "debug" "$version" "$architecture" "$PKGEXT"
    fi
}

srcyaml_write_attr(){
    local ident1="$1" ident2="$2" ident3="$3"
    local attrname=$4 attrvalues=("${@:5}")

    # normalize whitespace, strip leading and trailing
    attrvalues=("${attrvalues[@]//+([[:space:]])/ }")
    attrvalues=("${attrvalues[@]#[[:space:]]}")
    attrvalues=("${attrvalues[@]%[[:space:]]}")

    case $attrname in
        pkgver|pkgrel|epoch|url|install|changelog)
            for v in "${attrvalues[@]}"; do
                Yaml+=$(write_yaml_map "$ident3" "$attrname" "$v")
            done
        ;;
        *)
            Yaml+=$(write_yaml_map "$ident1" "$attrname")
            for v in "${attrvalues[@]}"; do
                Yaml+=$(write_yaml_seq "$ident2" "$v")
            done
        ;;
    esac
}

pkgbuild_extract_to_yaml() {
    local pkgname=$1 attrname=$2 isarray=$3 outvalue=

    if get_pkgbuild_attribute "$pkgname" "$attrname" "$isarray" 'outvalue'; then
        [[ -z $pkgname ]] && srcyaml_write_attr 2 4 2 "$attrname" "${outvalue[@]}"
        [[ -n $pkgname ]] && srcyaml_write_attr 4 6 2 "$attrname" "${outvalue[@]}"
    fi
}

srcyaml_write_section_details() {
    local attr package_arch a
    local multivalued_arch_attrs=(source provides conflicts depends replaces
	                              optdepends makedepends checkdepends)
# 	                              "${known_hash_algos[@]/%/sums}")

    for attr in "${singlevalued[@]}"; do
        pkgbuild_extract_to_yaml "$1" "$attr" 0
    done

    for attr in "${multivalued[@]}"; do
        pkgbuild_extract_to_yaml "$1" "$attr" 1
    done

    get_pkgbuild_attribute "$1" 'arch' 1 'package_arch'
    for a in "${package_arch[@]}"; do
        # 'any' is special. there's no support for, e.g. depends_any.
        [[ $a = any ]] && continue

        for attr in "${multivalued_arch_attrs[@]}"; do
            pkgbuild_extract_to_yaml "$1" "${attr}_$a" 1
        done
    done
}

yaml_write_global() {
    local singlevalued=(pkgver pkgrel epoch url install changelog) #pkgdesc
    local multivalued=(arch groups license checkdepends makedepends
                    depends provides conflicts replaces)
                    #noextract options backup optdepends
                    #source validpgpkeys "${known_hash_algos[@]/%/sums}")

    Yaml+=$(write_empty_line)
    Yaml+=$(write_yaml_map 0 "pkgbase")
    Yaml+=$(write_yaml_map 2 "name" "${pkgbase:-$pkgname}")
    ${details} && srcyaml_write_section_details ''
    Yaml+=$(write_empty_line)
}

yaml_write_package() {
    local singlevalued=(url install changelog) #pkgdesc
    local multivalued=(arch groups license checkdepends depends
                    provides conflicts replaces) #options backup optdepends)

    Yaml+=$(write_yaml_map 0 "packages")
    for pkg in "${pkgname[@]}"; do
        Yaml+=$(write_yaml_seq_map 2 "pkgname" "$pkg")
        ${details} && srcyaml_write_section_details "$pkg"
    done
    Yaml+=$(write_empty_line)
}

yaml_write_fileinfo(){
    local version
    version=$(get_full_version)
    pkgbase=${pkgbase:-$pkgname}
    Yaml+=$(write_yaml_map 0 "version" "${version:-0}")
    Yaml+=$(write_empty_line)
    local pkgfile debug_pkg
    pkgfile=$(print_package_names)
    Yaml+=$(write_yaml_map 0 "files")
    for f in ${pkgfile}; do
        Yaml+=$(write_yaml_seq 2 "${f##*/}")
    done
    Yaml+=$(write_empty_line)
    debug_pkg=$(print_debug_package_names)
    Yaml+=$(write_yaml_map 0 "debug")
    for d in ${debug_pkg}; do
        Yaml+=$(write_yaml_seq 2 "${d##*/}")
    done
    Yaml+=$(write_empty_line)
}

write_srcyaml(){
    Yaml=$(write_yaml_header)
    yaml_write_global
    yaml_write_package
    yaml_write_fileinfo
    printf '%s' "${Yaml}"
}

#}}}

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -d            Don't include details"
    echo '    -h            This help'
    echo ''
    exit "$1"
}

details=true

opts='dh'

while getopts "${opts}" arg; do
    case "${arg}" in
        d) details=false ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

srcpath=$(readlink -f "$1")

[[ -f "$srcpath"/PKGBUILD ]] || die "%s/PKGBUILD does not exist!" "$srcpath"
package="$srcpath"/PKGBUILD; shift

# shellcheck disable=1090
. "${package}"

load_makepkg_config

write_srcyaml
