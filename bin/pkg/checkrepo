#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ base conf

DATADIR=${DATADIR:-'/usr/share/artools'}
SYSCONFDIR=${SYSCONFDIR:-'/etc/artools'}

if [[ -n $SUDO_USER ]]; then
    eval "USER_HOME=~$SUDO_USER"
else
    USER_HOME=$HOME
fi

USER_CONF_DIR="${XDG_CONFIG_HOME:-$USER_HOME/.config}/artools"

prepare_dir(){
    [[ ! -d $1 ]] && mkdir -p "$1"
}

load_base_config(){

    local conf="$1/artools-base.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-base.conf
    [[ -r "$conf" ]] && . "$conf"

    CHROOTS_DIR=${CHROOTS_DIR:-'/var/lib/artools'}

    WORKSPACE_DIR=${WORKSPACE_DIR:-"${USER_HOME}/artools-workspace"}

    return 0
}

#}}}

load_base_config "${USER_CONF_DIR}" || load_base_config "${SYSCONFDIR}"

prepare_dir "${WORKSPACE_DIR}"
prepare_dir "${USER_CONF_DIR}"

#!/hint/bash

#{{{ pkg conf

load_pkg_config(){

    local conf="$1/artools-pkg.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-pkg.conf
    [[ -r "$conf" ]] && . "$conf"

    local git_domain="gitea.artixlinux.org"

    GIT_URL=${GIT_URL:-"https://${git_domain}"}

    GIT_SSH=${GIT_SSH:-"gitea@${git_domain}"}

    GIT_TOKEN=${GIT_TOKEN:-''}

    TREE_DIR_ARTIX=${TREE_DIR_ARTIX:-"${WORKSPACE_DIR}/artixlinux"}

    ARTIX_TREE=(
        packages community
        packages-{gfx,media,net}
    )

    local dev_tree=(
        packages-{llvm,python,perl,java,ruby,misc}
        python-{world,galaxy,galaxy-groups,misc}
    )

    local init_tree=(packages-{openrc,runit,s6,suite66,dinit})

    local desktop_tree=(
        packages-{kf5,plasma,kde,qt5,qt6,xorg,gtk}
        packages-{lxqt,gnome,cinnamon,mate,xfce,wm,lxde}
    )

    [[ -z ${TREE_NAMES_ARTIX[*]} ]] && \
    TREE_NAMES_ARTIX=(
        packages-kernel
        "${init_tree[@]}"
        "${dev_tree[@]}"
        "${desktop_tree[@]}"
        packages-devel
        packages-lib32
    )

    ARTIX_TREE+=("${TREE_NAMES_ARTIX[@]}")

    TREE_DIR_ARCH=${TREE_DIR_ARCH:-"${WORKSPACE_DIR}/archlinux"}

    [[ -z ${ARCH_TREE[*]} ]] && \
    ARCH_TREE=(svntogit-{packages,community})

    REPOS_ROOT=${REPOS_ROOT:-"${WORKSPACE_DIR}/repos"}

    REPOS_MIRROR=${REPOS_MIRROR:-'http://mirror1.artixlinux.org/repos'}

    HOST_TREE_ARCH=${HOST_TREE_ARCH:-'https://github.com/archlinux'}

    DBEXT=${DBEXT:-'gz'}

    return 0
}

#}}}

load_pkg_config "${USER_CONF_DIR}" || load_pkg_config "${SYSCONFDIR}"

prepare_dir "${REPOS_ROOT}"
prepare_dir "${TREE_DIR_ARTIX}"
prepare_dir "${TREE_DIR_ARCH}"

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}

#!/hint/bash

##{{{ repo

shopt -s extglob

load_valid_names(){
    local conf
    conf="${DATADIR}"/valid-names.conf
    [[ -f "$conf" ]] || return 1
    # shellcheck source=/usr/share/artools/valid-names.conf
    [[ -r "$conf" ]] && . "$conf"
    return 0
}

set_arch_repos(){
    local _testing="$1" _staging="$2" _unstable="$3"
    [[ -z ${valid_names[*]} ]] && load_valid_names
    ARCH_REPOS=("${stable[@]}")
    $_testing && ARCH_REPOS+=("${gremlins[@]}")
    $_staging && ARCH_REPOS+=("${goblins[@]}")
    $_unstable && ARCH_REPOS+=("${wobble[@]}")
}

find_repo(){
    local pkg="$1" pkgarch="${2:-${CARCH}}" repo
    for r in "${ARCH_REPOS[@]}"; do
        [[ -f $pkg/repos/$r-$pkgarch/PKGBUILD ]] && repo=repos/"$r-$pkgarch"
        [[ -f $pkg/repos/$r-any/PKGBUILD ]] && repo=repos/"$r"-any
        [[ -f $pkg/$pkgarch/$r/PKGBUILD ]] && repo="$pkgarch/$r"
    done
    echo "$repo"
}

find_pkg(){
    local searchdir="$1" pkg="$2" result
    result=$(find "$searchdir" -mindepth 2 -maxdepth 2 -type d -name "$pkg")
    echo "$result"
}

tree_loop(){
    local func="$1" pkgs
    for tree in "${ARTIX_TREE[@]}"; do
        pkgs=$(find "${TREE_DIR_ARTIX}/$tree" -name "$CARCH" | sort)
        for _package in ${pkgs}; do
            "$func" "$_package"
        done
    done
}

#}}}

#!/hint/bash

#{{{ table

msg_table_header(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${BLUE} ${mesg} ${ALL_OFF}\n" "$@"
}

msg_row_yellow(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${YELLOW} ${mesg}${ALL_OFF}\n" "$@"
}

msg_row_green(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN} ${mesg}${ALL_OFF}\n" "$@"
}

msg_row(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${WHITE} ${mesg}${ALL_OFF}\n" "$@"
}

msg_row_red(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${RED} ${mesg} ${ALL_OFF}\n" "$@"
}

#}}}


#{{{ db libs

extract_db() {
    local u="$1" cdir="$2"
    rm -rf "$cdir"
    mkdir -p "$cdir"
    msg2 "%s" "${cdir##*/}"
    curl -L -s "$u" | bsdtar -xf - -C "$cdir"
}

update_db_cache(){
    msg "Updating database cache ..."
    local cachedir url
    for repo in "${searchrepos[@]}"; do
        cachedir=${db_cache_dir}/linksdb/$repo
        url=${REPOS_MIRROR}/$repo/os/${CARCH}/$repo.${linksdb_ext}
        extract_db "$url" "$cachedir"
    done
    msg "Done"
}

#}}}

#{{{ sogrep

query_db() {
    for repo in "${searchrepos[@]}"; do
        local db
        db=${db_cache_dir}/linksdb/$repo/
        if [[ -d ${db} ]]; then
            while read -rd '' pkg; do
                read -r match
                pkg=${pkg#${db}}
                pkg="${pkg%/*}"
                msg_row "${tableQ}" "$repo" "$pkg" "${match}"
            done < <(grep -rZ "$library" "$db") | sort -u
        fi
    done
}

#}}}

#{{{ check db

is_db_entry() {
    local pkgname="$1" repo="${REPOS[$2]}" entry
    entry=${db_cache_dir}/linksdb/$repo/$pkgname

    if [[ -d "$entry" ]];then
        return 0
    fi
    return 1
}

check_db(){
    local pkgpath="${1}"

    for repo in "${!REPOS[@]}"; do

        local pkgbuild artixver
        if [[ -f $pkgpath/$repo/PKGBUILD ]]; then
            pkgbuild=$pkgpath/$repo/PKGBUILD

            # shellcheck disable=1090
            . "$pkgbuild" 2>/dev/null
            artixver=$(get_full_version)
            for name in "${pkgname[@]}"; do
                if ! is_db_entry "$name-$artixver" "$repo"; then
                    msg_row_red "${tableU}" "$repo" "$name" "$artixver" "false"
                else
                    ${all_db} && msg_row "${tableU}" "$repo" "$name" "$artixver" "true"
                fi
            done
            unset artixver pkgbuild pkgver epoch pkgname pkgbase
        fi
    done
}

#}}}

# {{{ check obsolete

show_obsolete_table() {
    local arch_mirror='https://mirror.f4st.host/archlinux'

    local arch_repo artix_repo artix_db arch_db url
    arch_repo="${searchrepos[@]}"
    artix_repo="${REPOS[$arch_repo]}"

    artix_db="${db_cache_dir}/artixdb/${artix_repo}"
    arch_db="${db_cache_dir}/archdb/${arch_repo}"

    msg "Updating database cache ..."
    url=${REPOS_MIRROR}/${artix_repo}/os/$CARCH/${artix_repo}.${db_ext}
    extract_db "$url" "${artix_db}"

    url=${arch_mirror}/${arch_repo}/os/$CARCH/${arch_repo}.${db_ext}
    extract_db "$url" "${arch_db}"
    msg "Done"

    msg_table_header "${tableQ}" "Repo" "Package" "Obsolete"
    for p in "${artix_db}"/*; do
        local pkg rel
        pkg=${p##*/}
        rel=${pkg##*-}
        rel=${rel%.*}
        pkg=${pkg%-*}
        local p="$pkg-$rel"

        if [[ "$p" != *openrc* ]] && [[ "$p" != *runit* ]] \
        && [[ "$p" != *s6* ]] && [[ "$p" != *suite66* ]] \
        && [[ "$p" != *udev* ]] && [[ "$p" != *elogind* ]] \
        && [[ "$p" != *sysusers* ]] && [[ "$p" != *tmpfiles* ]] \
        && [[ "$p" != *execline* ]] && [[ "$p" != *skalibs* ]] \
        && [[ "$p" != *netifrc* ]] && [[ "$p" != *bootlogd* ]] \
        && [[ "$p" != *pam_rundir* ]] && [[ "$p" != *artools* ]] \
        && [[ "$p" != *archlinux* ]] && [[ "$p" != *iso-profiles* ]] \
        && [[ "$p" != *calamares* ]] && [[ "$p" != *iso-initcpio* ]] \
        && [[ "$p" != *dinit* ]] && [[ "$p" != *artix* ]] && [[ "$p" != *blocaled* ]]; then
            if [[ ! -d "${arch_db}/$p" ]]; then
                msg_row "${tableQ}" "${artix_repo}" "$p" "true"
            fi
        fi
    done
}

#}}}

show_lib_table() {
    msg_table_header "${tableQ}" "Repo" "Package" "Library"
    query_db
}

show_db_table(){
    msg_table_header "${tableU}" "Repo" "Package" "Version" "Database"
    tree_loop check_db
}

db_cache_dir="${XDG_CACHE_HOME:-$USER_HOME/.cache}/artools"

linksdb_ext="links.tar.${DBEXT}"
db_ext="db.tar.${DBEXT}"

load_makepkg_config

sync=false
check=false
query=false
all_db=false
obsolete=false

readonly tableU="%-20s %-35s %-30s %-10s"
readonly tableQ="%-20s %-55s %s"

load_valid_names

#{{{ repo names arrays

declare -A REPOS=(
    [${valid_names[0]}]=system
    [${valid_names[1]}]=world
    [${valid_names[2]}]=galaxy
    [${valid_names[3]}]=lib32
    [${valid_names[4]}]=gremlins
    [${valid_names[5]}]=galaxy-gremlins
    [${valid_names[6]}]=lib32-gremlins
    [${valid_names[7]}]=goblins
    [${valid_names[8]}]=galaxy-goblins
    [${valid_names[9]}]=lib32-goblins
    [${valid_names[11]}]=kde-wobble
    [${valid_names[12]}]=gnome-wobble
)

searchrepos=(
    "${REPOS[${valid_names[11]}]}"
    "${REPOS[${valid_names[12]}]}"
    "${REPOS[${valid_names[7]}]}"
    "${REPOS[${valid_names[8]}]}"
    "${REPOS[${valid_names[9]}]}"
    "${REPOS[${valid_names[4]}]}"
    "${REPOS[${valid_names[5]}]}"
    "${REPOS[${valid_names[6]}]}"
    "${REPOS[${valid_names[0]}]}"
    "${REPOS[${valid_names[1]}]}"
    "${REPOS[${valid_names[2]}]}"
    "${REPOS[${valid_names[3]}]}"
)

#}}}

usage() {
    echo "Usage: ${0##*/} [options] (with -q [libname])"
    echo '    -r <repo>     Repo name to query'
    echo '                  [default: all]'
    echo "    -s            Sync repo databases"
    echo '    -c            Check repos'
    echo '    -a            Show repo db (-c)'
    echo '    -o            Check for obsolete packages'
    echo "    -q            Query repo databases for so libs"
    echo '    -h            This help'
    echo ''
    echo ''
    exit "$1"
}

opts='r:qcsaoh'

while getopts "${opts}" arg; do
    case "${arg}" in
        r) searchrepos=("$OPTARG") ;;
        s) sync=true ;;
        c) check=true ;;
        a) all_db=true ;;
        q) query=true ;;
        o) obsolete=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

library="$1"; shift

${sync} && update_db_cache

${check} && show_db_table

${query} && show_lib_table

${obsolete} && show_obsolete_table
