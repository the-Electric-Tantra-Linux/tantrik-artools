#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ base conf

DATADIR=${DATADIR:-'/usr/share/artools'}
SYSCONFDIR=${SYSCONFDIR:-'/etc/artools'}

if [[ -n $SUDO_USER ]]; then
    eval "USER_HOME=~$SUDO_USER"
else
    USER_HOME=$HOME
fi

USER_CONF_DIR="${XDG_CONFIG_HOME:-$USER_HOME/.config}/artools"

prepare_dir(){
    [[ ! -d $1 ]] && mkdir -p "$1"
}

load_base_config(){

    local conf="$1/artools-base.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-base.conf
    [[ -r "$conf" ]] && . "$conf"

    CHROOTS_DIR=${CHROOTS_DIR:-'/var/lib/artools'}

    WORKSPACE_DIR=${WORKSPACE_DIR:-"${USER_HOME}/artools-workspace"}

    return 0
}

#}}}

load_base_config "${USER_CONF_DIR}" || load_base_config "${SYSCONFDIR}"

prepare_dir "${WORKSPACE_DIR}"
prepare_dir "${USER_CONF_DIR}"

#!/hint/bash

#{{{ pkg conf

load_pkg_config(){

    local conf="$1/artools-pkg.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-pkg.conf
    [[ -r "$conf" ]] && . "$conf"

    local git_domain="gitea.artixlinux.org"

    GIT_URL=${GIT_URL:-"https://${git_domain}"}

    GIT_SSH=${GIT_SSH:-"gitea@${git_domain}"}

    GIT_TOKEN=${GIT_TOKEN:-''}

    TREE_DIR_ARTIX=${TREE_DIR_ARTIX:-"${WORKSPACE_DIR}/artixlinux"}

    ARTIX_TREE=(
        packages community
        packages-{gfx,media,net}
    )

    local dev_tree=(
        packages-{llvm,python,perl,java,ruby,misc}
        python-{world,galaxy,galaxy-groups,misc}
    )

    local init_tree=(packages-{openrc,runit,s6,suite66,dinit})

    local desktop_tree=(
        packages-{kf5,plasma,kde,qt5,qt6,xorg,gtk}
        packages-{lxqt,gnome,cinnamon,mate,xfce,wm,lxde}
    )

    [[ -z ${TREE_NAMES_ARTIX[*]} ]] && \
    TREE_NAMES_ARTIX=(
        packages-kernel
        "${init_tree[@]}"
        "${dev_tree[@]}"
        "${desktop_tree[@]}"
        packages-devel
        packages-lib32
    )

    ARTIX_TREE+=("${TREE_NAMES_ARTIX[@]}")

    TREE_DIR_ARCH=${TREE_DIR_ARCH:-"${WORKSPACE_DIR}/archlinux"}

    [[ -z ${ARCH_TREE[*]} ]] && \
    ARCH_TREE=(svntogit-{packages,community})

    REPOS_ROOT=${REPOS_ROOT:-"${WORKSPACE_DIR}/repos"}

    REPOS_MIRROR=${REPOS_MIRROR:-'http://mirror1.artixlinux.org/repos'}

    HOST_TREE_ARCH=${HOST_TREE_ARCH:-'https://github.com/archlinux'}

    DBEXT=${DBEXT:-'gz'}

    return 0
}

#}}}

load_pkg_config "${USER_CONF_DIR}" || load_pkg_config "${SYSCONFDIR}"

prepare_dir "${REPOS_ROOT}"
prepare_dir "${TREE_DIR_ARTIX}"
prepare_dir "${TREE_DIR_ARCH}"

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}

#!/hint/bash

#{{{ functions

find_cached_pkgfile() {
    local searchdirs=("$PKGDEST" "$PWD") results=()
    local pkg="$1"
    for dir in "${searchdirs[@]}"; do
        [[ -d "$dir" ]] || continue
        [[ -e "$dir/$pkg" ]] && results+=("$dir/$pkg")
    done
    case ${#results[*]} in
        0)
            return 1
        ;;
        1)
            printf '%s\n' "${results[0]}"
            return 0
        ;;
        *)
            error 'Multiple packages found:'
            printf '\t%s\n' "${results[@]}" >&2
            return 1
        ;;
    esac
}

get_pkgbasename() {
    local name="$1"
    local rm_pkg=${name%.pkg.tar*}
    rm_pkg=${rm_pkg%-*}
    rm_pkg=${rm_pkg%-*}
    rm_pkg=${rm_pkg%-*}
    echo "$rm_pkg"
}

#}}}


#{{{ deploy

add(){
    if pkgfile=$(find_cached_pkgfile "${pkgname}"); then
        msg "Found: %s" "${pkgfile}"
        packages+=("${pkgname}")
        action='add'
        ln -sfv "${pkgfile}"{,.sig} "$repo_path"/
    fi
}

remove(){
    packages+=("$(get_pkgbasename "${pkgname}")")
    action='remove'
    rm -v "$repo_path"/"${pkgname}"{,.sig}
}

repo_action(){
    local packages=() action func="$1"
    for pkgname in "${passfiles[@]}"; do
        "$func"
    done
    cd "$repo_path" || return
    if [[ -n "${action}" ]]; then
        repo-"${action}" -R "${dest_repo}"."${pkgdb_ext}" "${packages[@]}"
        ${linksdb} && links-"${action}" "${dest_repo}"."${linksdb_ext}" "${packages[@]}"
    fi
}

#}}}

load_makepkg_config

pkgdb_ext="db.tar.${DBEXT}"
linksdb_ext="links.tar.${DBEXT}"

add_pkg=false
rm_pkg=false
linksdb=false

cmd=${0##*/}
dest_repo=${cmd#*-}

usage() {
    echo "Usage: ${cmd} [options]"
    echo '    -d <dest>          Destination repository'
    echo '    -a                 Add package(s) to repository'
    echo '    -r                 Remove package(s) from repository'
    echo '    -l                 Use links db'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit "$1"
}

opts='arlhd:'

while getopts "${opts}" arg; do
    case "${arg}" in
        d) dest_repo="$OPTARG" ;;
        a) add_pkg=true; rm_pkg=false ;;
        r) rm_pkg=true; add_pkg=false ;;
        l) linksdb=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

passfiles=("$@")

repo_path=${REPOS_ROOT}/${dest_repo}/os/${CARCH}

if [[ -n "${passfiles[*]}" ]]; then
    if ${add_pkg}; then
        repo_action add
    fi
    if ${rm_pkg}; then
        repo_action remove
    fi
fi
