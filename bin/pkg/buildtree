#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ base conf

DATADIR=${DATADIR:-'/usr/share/artools'}
SYSCONFDIR=${SYSCONFDIR:-'/etc/artools'}

if [[ -n $SUDO_USER ]]; then
    eval "USER_HOME=~$SUDO_USER"
else
    USER_HOME=$HOME
fi

USER_CONF_DIR="${XDG_CONFIG_HOME:-$USER_HOME/.config}/artools"

prepare_dir(){
    [[ ! -d $1 ]] && mkdir -p "$1"
}

load_base_config(){

    local conf="$1/artools-base.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-base.conf
    [[ -r "$conf" ]] && . "$conf"

    CHROOTS_DIR=${CHROOTS_DIR:-'/var/lib/artools'}

    WORKSPACE_DIR=${WORKSPACE_DIR:-"${USER_HOME}/artools-workspace"}

    return 0
}

#}}}

load_base_config "${USER_CONF_DIR}" || load_base_config "${SYSCONFDIR}"

prepare_dir "${WORKSPACE_DIR}"
prepare_dir "${USER_CONF_DIR}"

#!/hint/bash

#{{{ pkg conf

load_pkg_config(){

    local conf="$1/artools-pkg.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-pkg.conf
    [[ -r "$conf" ]] && . "$conf"

    local git_domain="gitea.artixlinux.org"

    GIT_URL=${GIT_URL:-"https://${git_domain}"}

    GIT_SSH=${GIT_SSH:-"gitea@${git_domain}"}

    GIT_TOKEN=${GIT_TOKEN:-''}

    TREE_DIR_ARTIX=${TREE_DIR_ARTIX:-"${WORKSPACE_DIR}/artixlinux"}

    ARTIX_TREE=(
        packages community
        packages-{gfx,media,net}
    )

    local dev_tree=(
        packages-{llvm,python,perl,java,ruby,misc}
        python-{world,galaxy,galaxy-groups,misc}
    )

    local init_tree=(packages-{openrc,runit,s6,suite66,dinit})

    local desktop_tree=(
        packages-{kf5,plasma,kde,qt5,qt6,xorg,gtk}
        packages-{lxqt,gnome,cinnamon,mate,xfce,wm,lxde}
    )

    [[ -z ${TREE_NAMES_ARTIX[*]} ]] && \
    TREE_NAMES_ARTIX=(
        packages-kernel
        "${init_tree[@]}"
        "${dev_tree[@]}"
        "${desktop_tree[@]}"
        packages-devel
        packages-lib32
    )

    ARTIX_TREE+=("${TREE_NAMES_ARTIX[@]}")

    TREE_DIR_ARCH=${TREE_DIR_ARCH:-"${WORKSPACE_DIR}/archlinux"}

    [[ -z ${ARCH_TREE[*]} ]] && \
    ARCH_TREE=(svntogit-{packages,community})

    REPOS_ROOT=${REPOS_ROOT:-"${WORKSPACE_DIR}/repos"}

    REPOS_MIRROR=${REPOS_MIRROR:-'http://mirror1.artixlinux.org/repos'}

    HOST_TREE_ARCH=${HOST_TREE_ARCH:-'https://github.com/archlinux'}

    DBEXT=${DBEXT:-'gz'}

    return 0
}

#}}}

load_pkg_config "${USER_CONF_DIR}" || load_pkg_config "${SYSCONFDIR}"

prepare_dir "${REPOS_ROOT}"
prepare_dir "${TREE_DIR_ARTIX}"
prepare_dir "${TREE_DIR_ARCH}"

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}

#!/hint/bash

#{{{ common functions

get_compliant_name(){
    local gitname="$1"
    case "$gitname" in
        *+) gitname=${gitname//+/plus}
    esac
    echo "$gitname"
}

get_pkg_org(){
    local pkg="$1" org sub
    case ${pkg} in
        ruby-*) org="packagesRuby" ;;
        perl-*) org="packagesPerl" ;;
        python-*|python2-*) org="packagesPython" ;;
        *) sub=${pkg:0:1}; org="packages${sub^^}" ;;
    esac
    echo "$org"
}

api_put() {
    curl -s -X PUT "$@"
}

api_delete() {
    curl -s -X DELETE "$@"
}

api_post() {
    curl -s -X POST "$@"
}

#}}}

#!/hint/bash

#{{{ git

get_local_head(){
    git log --pretty=%H ...refs/heads/master^ | head -n 1
}

get_remote_head(){
    git ls-remote origin -h refs/heads/master | cut -f1
}

has_changeset(){
    local head_l="$1" head_r="$2"
    if [[ "$head_l" == "$head_r" ]]; then
        msg2 "remote changes: no"
        return 1
    else
        msg2 "remote changes: yes"
        return 0
    fi
}

pull_tree(){
    local tree="$1" local_head="$2" os="${3:-Artix}"
    local remote_head
    remote_head=$(get_remote_head)

    msg "Checking (%s) (%s)" "${tree}" "$os"
    if has_changeset "${local_head}" "${remote_head}";then
        git pull origin master
    fi
}

#}}}

#!/hint/bash

#{{{ gitea api

add_team_to_repo() {
    local name="$1"
    local org="$2"
    local team="$3"
    local url

    url="${GIT_URL}/api/v1/repos/$org/$name/teams/$team?access_token=${GIT_TOKEN}"

    msg2 "Adding team (%s) to package repo [%s]" "$team" "$name"

    api_put "$url" -H  "accept: application/json"
}

remove_team_from_repo() {
    local name="$1"
    local org="$2"
    local team="$3"
    local url

    url="${GIT_URL}/api/v1/repos/$org/$name/teams/$team?access_token=${GIT_TOKEN}"

    msg2 "Removing team (%s) from package repo [%s]" "$team" "$name"

    api_delete "$url" -H  "accept: application/json"
}

#}}}

#!/hint/bash

##{{{ repo

shopt -s extglob

load_valid_names(){
    local conf
    conf="${DATADIR}"/valid-names.conf
    [[ -f "$conf" ]] || return 1
    # shellcheck source=/usr/share/artools/valid-names.conf
    [[ -r "$conf" ]] && . "$conf"
    return 0
}

set_arch_repos(){
    local _testing="$1" _staging="$2" _unstable="$3"
    [[ -z ${valid_names[*]} ]] && load_valid_names
    ARCH_REPOS=("${stable[@]}")
    $_testing && ARCH_REPOS+=("${gremlins[@]}")
    $_staging && ARCH_REPOS+=("${goblins[@]}")
    $_unstable && ARCH_REPOS+=("${wobble[@]}")
}

find_repo(){
    local pkg="$1" pkgarch="${2:-${CARCH}}" repo
    for r in "${ARCH_REPOS[@]}"; do
        [[ -f $pkg/repos/$r-$pkgarch/PKGBUILD ]] && repo=repos/"$r-$pkgarch"
        [[ -f $pkg/repos/$r-any/PKGBUILD ]] && repo=repos/"$r"-any
        [[ -f $pkg/$pkgarch/$r/PKGBUILD ]] && repo="$pkgarch/$r"
    done
    echo "$repo"
}

find_pkg(){
    local searchdir="$1" pkg="$2" result
    result=$(find "$searchdir" -mindepth 2 -maxdepth 2 -type d -name "$pkg")
    echo "$result"
}

tree_loop(){
    local func="$1" pkgs
    for tree in "${ARTIX_TREE[@]}"; do
        pkgs=$(find "${TREE_DIR_ARTIX}/$tree" -name "$CARCH" | sort)
        for _package in ${pkgs}; do
            "$func" "$_package"
        done
    done
}

#}}}

#!/hint/bash

#{{{ jenkins

write_jenkinsfile(){
    local pkg="$1"
    local jenkins=$pkg/Jenkinsfile

    echo "@Library('artix-ci') import org.artixlinux.RepoPackage" > "$jenkins"
    {
    echo ''
    echo 'PackagePipeline(new RepoPackage(this))'
    echo ''
    } >> "$jenkins"

    git add "$jenkins"
}

write_agentyaml(){
    local pkg="$1"
    local agent="$pkg"/.artixlinux/agent.yaml label='master'
    [[ -d $pkg/.artixlinux ]] || mkdir "$pkg"/.artixlinux

    echo '---' > "$agent"
    {
    echo ''
    echo "label: $label"
    echo ''
    } >> "$agent"

    git add "$agent"
}

commit_jenkins_files(){
    local pkg="$1"

    write_jenkinsfile "$pkg"
    write_agentyaml "$pkg"

    git commit -m "initial commit"
}

#}}}


#{{{ new git repo

subrepo_clone(){
    local pkg="$1"
    local org="$2"
    local name="$3"

    msg2 "Subrepo clone [%s] from (%s)" "$pkg" "$org/$name"
    git subrepo clone "${GIT_SSH}":"$org"/"$name".git "$pkg"
}

subrepo_new(){
    cd "${TREE_DIR_ARTIX}/${group}" || return

    local org gitname
    org=$(get_pkg_org "${package}")
    gitname=$(get_compliant_name "${package}")

    gitearepo -cr "$gitname"

    add_team_to_repo "$gitname" "$org" "${team}"

    subrepo_clone "${package}" "$org" "$gitname"

    mkdir -p "${TREE_DIR_ARTIX}/${group}/${package}/trunk"

    commit_jenkins_files "${package}"
}

#}}}

#{{{ pull

clone_tree(){
    local url="$1" tree="$2" os="${3:-Artix}"

    msg "Cloning %s (%s) ..." "$tree" "$os"

    git clone "$url/$tree".git
}

pull_tree_arch(){
    cd "${TREE_DIR_ARCH}" || return
    for tree in "${ARCH_TREE[@]}";do
        if [[ -d "${tree}" ]];then
            ( cd "${tree}" || return
                pull_tree "${tree}" "$(get_local_head)" "Arch"
            )
        else
            clone_tree "${HOST_TREE_ARCH}" "${tree}" "Arch"
        fi
    done
}

config_tree(){
    local tree="$1"
    cd "$tree" || return
        git config --bool pull.rebase true
        git config commit.gpgsign true
        if [[ -n "${GPGKEY}" ]];then
            git config user.signingkey "${GPGKEY}"
        else
            warning "No GPGKEY configured in makepkg.conf!"
        fi
    cd ..
}

pull_tree_artix(){
    local repos=()
    if ${sync_group}; then
        repos=("${group}")
    else
        repos=("${ARTIX_TREE[@]}")
    fi
    cd "${TREE_DIR_ARTIX}" || return
    for tree in "${repos[@]}"; do
        if [[ -d "${tree}" ]];then
            config_tree "${tree}"
            ( cd "${tree}" || return
                pull_tree "${tree}" "$(get_local_head)"
            )
        else
            clone_tree "${host_tree_artix}" "${tree}"
            config_tree "${tree}"
        fi
    done
}

#}}}

#{{{ patch

patch_pkg(){
    local pkgpath="$1"
    local pkg=${pkgpath%/*}
    pkg=${pkg##*/}
    sed -e 's|arch-meson|artix-meson|' -i "$pkgpath"/PKGBUILD
    case $pkg in
        glibc)
            msg2 "Patching %s" "$pkg"
            sed -e 's|{locale,systemd/system,tmpfiles.d}|{locale,tmpfiles.d}|' \
                -e '/nscd.service/d' \
                -i "$pkgpath"/PKGBUILD
        ;;
        linux|linux-lts)
            msg2 "Patching %s" "$pkg"
            sed -e 's|KBUILD_BUILD_HOST=.*|KBUILD_BUILD_HOST=artixlinux|' -i "$pkgpath"/PKGBUILD
            sed -e 's|CONFIG_DEFAULT_HOSTNAME=.*|CONFIG_DEFAULT_HOSTNAME="artixlinux"|' \
                -i "$pkgpath"/config
        ;;
        bash)
            msg2 "Patching %s" "$pkg"
            # shellcheck disable=2016
            sed -e 's|system.bash_logout)|system.bash_logout artix.bashrc)|' \
            -e "s|etc/bash.|etc/bash/|g" \
            -e 's|"$pkgdir/etc/skel/.bash_logout"|"$pkgdir/etc/skel/.bash_logout"\n  install -Dm644 artix.bashrc $pkgdir/etc/bash/bashrc.d/artix.bashrc|' \
            -i "$pkgpath"/PKGBUILD
            ( cd "$pkgpath" || return
                patch -Np 1 -i "${DATADIR}"/patches/artix-bash.patch
                updpkgsums
            )
        ;;
        gstreamer|gst-plugins-*|licenses)
            msg2 "Patching %s" "$pkg"
            sed -e 's|https://www.archlinux.org/|https://www.artixlinux.org/|' \
                -e 's|(Arch Linux)|(Artix Linux)|' \
                -i "$pkgpath"/PKGBUILD
        ;;
    esac
}

#}}}

#{{{ pkgbuild import

sync_pkg(){
    local rsync_args=(-aWxvci --progress --delete-before --no-R --no-implied-dirs)
    local src="$1" dest="$2"
    msg "Sync from Arch [%s] to Artix [%s]" "${src##*archlinux/}" "${dest##*artixlinux/}"
    rsync "${rsync_args[@]}" "$src"/ "$dest"/
}

show_deps(){
    local src="$1" archver

    # shellcheck disable=1090
    . "$src"/PKGBUILD 2>/dev/null

    archver=$(get_full_version)

    # shellcheck disable=2154
    [[ -n ${pkgbase} ]] && msg2 "pkgbase: %s" "${pkgbase}"
    # shellcheck disable=2154
    msg2 "pkgname: %s" "${pkgname[*]}"
    # shellcheck disable=2154
    [[ -n "${pkgdesc}" ]] && msg2 "pkgdesc: %s" "${pkgdesc}"
    # shellcheck disable=2154
    msg2 "Arch Version: %s" "$archver"
    # shellcheck disable=2154
    msg2 "arch: %s" "$arch"
    # shellcheck disable=2154
    [[ -n ${makedepends[*]} ]] && msg2 "makedepends: %s" "${makedepends[*]}"
    # shellcheck disable=2154
    [[ -n ${checkdepends[*]} ]] && msg2 "checkdepends: %s" "${checkdepends[*]}"
    # shellcheck disable=2154
    [[ -n ${depends[*]} ]] && msg2 "depends: %s" "${depends[*]}"
    # shellcheck disable=2154
    [[ -n ${optdepends[*]} ]] && msg2 "optdepends: %s" "${optdepends[@]}"
}

from_arch(){
    cd "${TREE_DIR_ARTIX}" || return

    local srcpath repo archpath artixpath
    srcpath=$(find_pkg "${TREE_DIR_ARCH}" "${package}")
    [[ -z $srcpath ]] && die "Package '%s' does not exist!" "${package}"

    repo=$(find_repo "$srcpath")
    msg "repo: %s" "${repo#*/}"

    archpath=$srcpath/$repo
    artixpath=$(find_pkg "${TREE_DIR_ARTIX}" "${package}")

    show_deps "$archpath"

    if [[ -f "$artixpath"/.gitrepo ]]; then
        artixpath="$artixpath"/trunk

        if [[ -d "$artixpath" ]];then
            sync_pkg "$archpath" "$artixpath"
            patch_pkg "$artixpath"
        fi
    else
        die "Package '%s' does not exist!" "${package}"
    fi
}

#}}}

view_build(){
    local archpath repo
    archpath=$(find_pkg "${TREE_DIR_ARCH}" "${package}")
    [[ -z $archpath ]] && die "Package '%s' does not exist!" "${package}"
    repo=$(find_repo "${archpath}")
    archpath=$archpath/$repo
    msg "repo: %s" "${repo#*/}"
    show_deps "$archpath"
}

check_tree(){
    local archpath artixpath group
    archpath=$(find_pkg "${TREE_DIR_ARCH}" "${package}")
    [[ -z $archpath ]] && die "Package '%s' does not exist!" "${package}"
    artixpath=$(find_pkg "${TREE_DIR_ARTIX}" "${package}")
    group=${artixpath%/*}
    msg "group: %s" "${group##*/}"

    [[ -z $artixpath ]] && msg2 "exists: %s" "no"
    [[ -n $artixpath ]] && msg2 "exists: %s" "yes"
}

sync_repos(){
    ${sync_arch} && pull_tree_arch
    ${sync_artix} && pull_tree_artix
}

load_makepkg_config

load_valid_names

testing=true
staging=true
unstable=false

sync=false
sync_arch=true
sync_artix=true
import=false
view=false
createnew=false
sync_group=false
check=false

package=''

team='community'
group="${ARTIX_TREE[0]}"

host_tree_artix="${GIT_SSH}:artixlinux"

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -p <pkg>      Package name'
    echo '    -t <team>     Team name (only with -n)'
    echo '                  Possible values: core,extra,community,multilib'
    echo "                  [default: ${team}]"
    echo '    -g <group>    Group name, the superrepo (only with -n or -s)'
    echo "                  [default: ${group}]"
    echo "    -s            Clone or pull repos"
    echo "    -a            Don't clone or pull arch repos"
    echo "    -b            Don't clone or pull artix repos"
    echo '    -i            Import a package from arch repos'
    echo '    -n            New remote subrepo and clone it'
    echo '    -v            Check if a package is in the artix tree(s)'
    echo '    -c            View package depends'
    echo '    -x            Exclude testing (only with -i)'
    echo '    -y            Exclude staging (only with -i)'
    echo '    -z            Include kde & gnome unstable (only with -i)'
    echo '    -h            This help'
    echo ''
    echo ''
    exit "$1"
}

opts='p:t:g:sinabcvxyzh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) package="$OPTARG" ;;
        t) team="$OPTARG" ;;
        g) group="$OPTARG"; sync_group=true ;;
        s) sync=true ;;
        a) sync_arch=false ;;
        b) sync_artix=false ;;
        i) import=true ;;
        n) createnew=true ;;
        c) check=true ;;
        v) view=true ;;
        x) testing=false ;;
        y) staging=false ;;
        z) unstable=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

set_arch_repos "$testing" "$staging" "$unstable"

${sync} && sync_repos

${view} && view_build

${check} && check_tree

${import} && from_arch

${createnew} && subrepo_new
