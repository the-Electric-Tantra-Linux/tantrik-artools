#!/bin/bash
#
#   links-add - add a package to a given repo database file
#   links-remove - remove a package entry from a given repo database file
#
#   Copyright (c) 2006-2018 Pacman Development Team <pacman-dev@archlinux.org>
#   Copyright (c) 2019 artoo@artixlinux.org
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}


shopt -s extglob

declare -r REPO_DB_NAME="links"

QUIET=0
ONLYADDNEW=0
SIGN=0
KEY=0
VERIFY=0
REPO_DB_FILE=
REPO_DB_PREFIX=
REPO_DB_SUFFIX=
LOCKFILE=
CLEAN_LOCK=0

# ensure we have a sane umask set
umask 0022

# print usage instructions
usage() {
    cmd=${0##*/}
    printf -- "%s \n\n" "$cmd"
    if [[ $cmd == "links-add" ]] ; then
        printf -- "Usage: links-add [options] <path-to-db> <package> ...\n"
        printf -- "\n"
        printf -- "\
links-add will update a package database by reading a package file.\n\
Multiple packages to add can be specified on the command line.\n"
        printf -- "\n"
        printf -- "Options:\n"
        printf -- "  -n, --new         only add packages that are not already in the database\n"
    elif [[ $cmd == "links-remove" ]] ; then
        printf -- "Usage: links-remove [options] <path-to-db> <packagename> ...\n"
        printf -- "\n"
        printf -- "\
links-remove will update a package database by removing the package name\n\
specified on the command line from the given repo database. Multiple\n\
packages to remove can be specified on the command line.\n"
        printf -- "\n"
        printf -- "Options:\n"
    else
        printf -- "Please move along, there is nothing to see here.\n"
        return
    fi
    printf -- "  --nocolor         turn off color in output\n"
    printf -- "  -q, --quiet       minimize output\n"
    printf -- "  -s, --sign        sign database with GnuPG after update\n"
    printf -- "  -k, --key <key>   use the specified key to sign the database\n"
    printf -- "  -v, --verify      verify database's signature before update\n"
    printf -- "\n\
See %s(8) for more details and descriptions of the available options.\n" "$cmd"
    printf "\n"
    if [[ $cmd == "links-add" ]] ; then
        printf -- "Example:  links-add /path/to/repo.links.tar.xz pacman-5.1.3-1-x86_64.pkg.tar.xz\n"
    elif [[ $cmd == "links-remove" ]] ; then
        printf -- "Example:  links-remove /path/to/repo.links.tar.xz kernel26\n"
    fi
}

find_pkgentry() {
    local pkgname=$1
    local pkgentry

    for pkgentry in "$tmpdir/${REPO_DB_NAME}/$pkgname"*; do
        name=${pkgentry##*/}
        if [[ ${name%-*-*} = "$pkgname" ]]; then
            echo "$pkgentry"
            return 0
        fi
    done
    return 1
}

check_gpg() {
    if ! type -p gpg >/dev/null; then
        error "Cannot find the gpg binary! Is GnuPG installed?"
        exit 1 # $E_MISSING_PROGRAM
    fi

    if (( ! VERIFY )); then
        if ! gpg --list-secret-key ${GPGKEY:+"$GPGKEY"} &>/dev/null; then
            if [[ -n "$GPGKEY" ]]; then
                error "The key ${GPGKEY} does not exist in your keyring."
            elif (( ! KEY )); then
                error "There is no key in your keyring."
            fi
            exit 1
        fi
    fi
}

# sign the package database once repackaged
create_signature() {
    (( ! SIGN )) && return
    local dbfile=$1
    local ret=0
    msg "Signing database '%s'..." "${dbfile##*/.tmp.}"

    local SIGNWITHKEY=()
    if [[ -n $GPGKEY ]]; then
        SIGNWITHKEY=(-u "${GPGKEY}")
    fi
    gpg --detach-sign --use-agent --no-armor "${SIGNWITHKEY[@]}" "$dbfile" &>/dev/null || ret=$?

    if (( ! ret )); then
        msg2 "Created signature file '%s'" "${dbfile##*/.tmp.}.sig"
    else
        warning "Failed to sign package database file '%s'" "${dbfile##*/.tmp.}"
    fi
}

# verify the existing package database signature
verify_signature() {
    (( ! VERIFY )) && return
    local dbfile=$1
    local ret=0
    msg "Verifying database signature..."

    if [[ ! -f $dbfile.sig ]]; then
        warning "No existing signature found, skipping verification."
        return
    fi
    gpg --verify "$dbfile.sig" || ret=$?
    if (( ! ret )); then
        msg2 "Database signature file verified."
    else
        error "Database signature was NOT valid!"
        exit 1
    fi
}

verify_repo_extension() {
    local junk=()
    if [[ $1 = *.links.tar* ]] && get_compression_command "$1" junk; then
        return 0
    fi

    error "'%s' does not have a valid database archive extension." "$1"
    exit 1
}

# write an entry to the pacman database
#   arg1 - path to package
db_write_entry() {
    # blank out all variables
    local pkgfile=$1

    local pkgname pkgver

    # read info from the zipped package
    local line var val
    while read -r line; do
        [[ ${line:0:1} = '#' ]] && continue
        IFS=' =' read -r var val < <(printf '%s\n' "$line")
        # normalize whitespace with an extglob
        declare "$var=${val//+([[:space:]])/ }"

    done< <(bsdtar -xOqf "$pkgfile" .PKGINFO)

    # ensure $pkgname and $pkgver variables were found
    if [[ -z $pkgname || -z $pkgver ]]; then
        error "Invalid package file '%s'." "$pkgfile"
        return 1
    fi

    if [[ -d $tmpdir/${REPO_DB_NAME}/$pkgname-$pkgver ]]; then
        warning "An entry for '%s' already existed" "$pkgname-$pkgver"
        if (( ONLYADDNEW )); then
            return 0
        fi
    fi

    # remove an existing entry if it exists, ignore failures
    db_remove_entry "$pkgname"

    local tmppkg=$tmpdir/pkg/$pkgname-$pkgver

    mkdir "$tmppkg"

    bsdtar -xof "$pkgfile" -C "$tmppkg" --include={opt,{,usr/}{lib{,32},{s,}bin}}'/*' 2>/dev/null

    pushd "$tmpdir/${REPO_DB_NAME}" >/dev/null
    mkdir "$pkgname-$pkgver"
    pushd "$pkgname-$pkgver" >/dev/null

    # create links entry
    msg2 "Creating '%s' db entry..." "${REPO_DB_NAME}"

    local linksentry=$tmpdir/${REPO_DB_NAME}/$pkgname-$pkgver/${REPO_DB_NAME}
    local files=$(find "$tmppkg" -type f ! -ipath "*/Documentation/*")

    for f in ${files}; do
        readelf -d "$f" 2> /dev/null | sed -nr 's/.*Shared library: \[(.*)\].*/\1/p'
    done | sort -u > "$linksentry"

    popd >/dev/null
    popd >/dev/null

    return 0
}

# remove existing entries from the DB
#   arg1 - package name
db_remove_entry() {
    local pkgname=$1
    local notfound=1
    local pkgentry
    pkgentry=$(find_pkgentry "$pkgname")
    while [[ -n $pkgentry ]]; do
        notfound=0

        msg2 "Removing existing entry '%s'..." \
        "${pkgentry##*/}"
        rm -rf "$pkgentry"

        # remove entries in "links" database
        local linksentry
        linksentry=$(echo "$pkgentry" | sed 's/\(.*\)\/db\//\1\/links\//')
        rm -rf "$linksentry"

        pkgentry=$(find_pkgentry "$pkgname")
    done
    return $notfound
}

prepare_repo_db() {
    local repodir dbfile

    # ensure the path to the DB exists; $LOCKFILE is always an absolute path
    repodir=${LOCKFILE%/*}/

    if [[ ! -d $repodir ]]; then
        error "%s does not exist or is not a directory." "$repodir"
        exit 1
    fi

    # check lock file
    if ( set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
        CLEAN_LOCK=1
    else
        error "Failed to acquire lockfile: %s." "$LOCKFILE"
        [[ -f $LOCKFILE ]] && error "Held by process %s" "$(cat "$LOCKFILE")"
        exit 1
    fi

    dbfile=${repodir}/$REPO_DB_PREFIX.${REPO_DB_NAME}.$REPO_DB_SUFFIX

    if [[ -f $dbfile ]]; then
        # there are two situations we can have here:
        # a DB with some entries, or a DB with no contents at all.
        if ! bsdtar -tqf "$dbfile" '*/links' >/dev/null 2>&1; then
            # check empty case
            if [[ -n $(bsdtar -tqf "$dbfile" '*' 2>/dev/null) ]]; then
                error "Repository file '%s' is not a proper links database." "$dbfile"
                exit 1
            fi
        fi
        verify_signature "$dbfile"
        msg "Extracting %s to a temporary location..." "${dbfile##*/}"
        bsdtar -xf "$dbfile" -C "$tmpdir/${REPO_DB_NAME}"
    else
        case $cmd in
            links-remove)
                # only a missing "db" database is currently an error
                # TODO: remove if statement
                if [[ ${REPO_DB_NAME} == "links" ]]; then
                    error "Repository file '%s' was not found." "$dbfile"
                    exit 1
                fi
                ;;
            links-add)
                # check if the file can be created (write permission, directory existence, etc)
                if ! touch "$dbfile"; then
                    error "Repository file '%s' could not be created." "$dbfile"
                    exit 1
                fi
                rm -f "$dbfile"
                ;;
        esac
    fi
}

add() {
    if [[ ! -f $1 ]]; then
        error "File '%s' not found." "$1"
        return 1
    fi

    pkgfile=$1
    if ! bsdtar -tqf "$pkgfile" .PKGINFO >/dev/null 2>&1; then
        error "'%s' is not a package file, skipping" "$pkgfile"
        return 1
    fi

    msg "Adding package '%s'" "$pkgfile"

    db_write_entry "$pkgfile"
}

remove() {
    pkgname=$1
    msg "Searching for package '%s'..." "$pkgname"

    if ! db_remove_entry "$pkgname"; then
        error "Package matching '%s' not found." "$pkgname"
        return 1
    fi

    return 0
}

rotate_db() {
    dirname=${LOCKFILE%/*}

    pushd "$dirname" >/dev/null

    filename=${REPO_DB_PREFIX}.${REPO_DB_NAME}.${REPO_DB_SUFFIX}
    tempname=$dirname/.tmp.$filename

    # hardlink or move the previous version of the database and signature to .old
    # extension as a backup measure
    if [[ -f $filename ]]; then
        ln -f "$filename" "$filename.old" 2>/dev/null || \
            mv -f "$filename" "$filename.old"

        if [[ -f $filename.sig ]]; then
            ln -f "$filename.sig" "$filename.old.sig" 2>/dev/null || \
                mv -f "$filename.sig" "$filename.old.sig"
        else
            rm -f "$filename.old.sig"
        fi
    fi

    # rotate the newly-created database and signature into place
    mv "$tempname" "$filename"
    if [[ -f $tempname.sig ]]; then
        mv "$tempname.sig" "$filename.sig"
    fi

    dblink=${filename%.tar*}
    rm -f "$dblink" "$dblink.sig"
    ln -s "$filename" "$dblink" 2>/dev/null || \
        ln "$filename" "$dblink" 2>/dev/null || \
        cp "$filename" "$dblink"
    if [[ -f "$filename.sig" ]]; then
        ln -s "$filename.sig" "$dblink.sig" 2>/dev/null || \
            ln "$filename.sig" "$dblink.sig" 2>/dev/null || \
            cp "$filename.sig" "$dblink.sig"
    fi

    popd >/dev/null
}

create_db() {
    # $LOCKFILE is already guaranteed to be absolute so this is safe
    dirname=${LOCKFILE%/*}

    filename=${REPO_DB_PREFIX}.${REPO_DB_NAME}.${REPO_DB_SUFFIX}
    # this ensures we create it on the same filesystem, making moves atomic
    tempname=$dirname/.tmp.$filename

    pushd "$tmpdir/${REPO_DB_NAME}" >/dev/null
    local files=(*)
    if [[ ${files[*]} = '*' ]]; then
        # we have no packages remaining? zip up some emptyness
        warning "No packages remain, creating empty database."
        files=(-T /dev/null)
    fi
    bsdtar -cf - "${files[@]}" | compress_as "$filename" > "$tempname"
    popd >/dev/null

    create_signature "$tempname"
}

trap_exit() {
    # unhook all traps to avoid race conditions
    trap '' EXIT TERM HUP QUIT INT ERR

    echo
    error "$@"
    clean_up 1
}

clean_up() {
    local exit_code=${1:-$?}

    # unhook all traps to avoid race conditions
    trap '' EXIT TERM HUP QUIT INT ERR

    [[ -d $tmpdir ]] && rm -rf "$tmpdir"
    (( CLEAN_LOCK )) && [[ -f $LOCKFILE ]] && rm -f "$LOCKFILE"

    exit "$exit_code"
}

# PROGRAM START
case $1 in
    -h|--help) usage; exit 0;;
esac

# figure out what program we are
cmd=${0##*/}

if [[ $cmd != "links-add" && $cmd != "links-remove" ]]; then
    error "Invalid command name '%s' specified." "$cmd"
    exit 1
fi

tmpdir=$(mktemp -d "${TMPDIR:-/tmp}/repo-tools.XXXXXXXXXX") || (\
    error "Cannot create temp directory for database building."; \
    exit 1)

for repo in "pkg" "${REPO_DB_NAME}"; do
    mkdir "$tmpdir/$repo"
done

trap 'clean_up' EXIT
for signal in TERM HUP QUIT; do
    trap "trap_exit \"$(gettext "%s signal caught. Exiting...")\" \"$signal\"" "$signal"
done
trap 'trap_exit "$(gettext "Aborted by user! Exiting...")"' INT
trap 'trap_exit "$(gettext "An unknown error has occurred. Exiting...")"' ERR

declare -a args
# parse arguments
while (( $# )); do
    case $1 in
        -q|--quiet) QUIET=1 ;;
        -n|--new) ONLYADDNEW=1 ;;
        -s|--sign) SIGN=1 ;;
        -k|--key) KEY=1 ; shift; GPGKEY=$1 ;;
        -v|--verify) VERIFY=1 ;;
        *) args+=("$1") ;;
    esac
    shift
done

REPO_DB_FILE=${args[0]}
if [[ -z $REPO_DB_FILE ]]; then
    usage
    exit 1
fi

if [[ $REPO_DB_FILE == /* ]]; then
    LOCKFILE=$REPO_DB_FILE.lck
else
    LOCKFILE=$PWD/$REPO_DB_FILE.lck
fi

verify_repo_extension "$REPO_DB_FILE"

REPO_DB_PREFIX=${REPO_DB_FILE##*/}
REPO_DB_PREFIX=${REPO_DB_PREFIX%.links.*}
REPO_DB_SUFFIX=${REPO_DB_FILE##*.links.}

if (( SIGN || VERIFY )); then
    check_gpg
fi

if (( VERIFY && ${#args[@]} == 1 )); then
    dbfile=${repodir}/$REPO_DB_PREFIX.${REPO_DB_NAME}.$REPO_DB_SUFFIX

    if [[ -f $dbfile ]]; then
        verify_signature "$dbfile"
    fi
    exit 0
fi

prepare_repo_db

fail=0
for arg in "${args[@]:1}"; do
    case $cmd in
        links-add) add "$arg" ;;
        links-remove) remove "$arg" ;;
    esac || fail=1
done

# if the whole operation was a success, re-zip and rotate databases
if (( !fail )); then
    msg "Creating updated database file '%s'" "$REPO_DB_FILE"
    create_db
    rotate_db
else
    msg "No packages modified, nothing to do."
    exit 1
fi

exit 0
