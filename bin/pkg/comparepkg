#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ base conf

DATADIR=${DATADIR:-'/usr/share/artools'}
SYSCONFDIR=${SYSCONFDIR:-'/etc/artools'}

if [[ -n $SUDO_USER ]]; then
    eval "USER_HOME=~$SUDO_USER"
else
    USER_HOME=$HOME
fi

USER_CONF_DIR="${XDG_CONFIG_HOME:-$USER_HOME/.config}/artools"

prepare_dir(){
    [[ ! -d $1 ]] && mkdir -p "$1"
}

load_base_config(){

    local conf="$1/artools-base.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-base.conf
    [[ -r "$conf" ]] && . "$conf"

    CHROOTS_DIR=${CHROOTS_DIR:-'/var/lib/artools'}

    WORKSPACE_DIR=${WORKSPACE_DIR:-"${USER_HOME}/artools-workspace"}

    return 0
}

#}}}

load_base_config "${USER_CONF_DIR}" || load_base_config "${SYSCONFDIR}"

prepare_dir "${WORKSPACE_DIR}"
prepare_dir "${USER_CONF_DIR}"

#!/hint/bash

#{{{ pkg conf

load_pkg_config(){

    local conf="$1/artools-pkg.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-pkg.conf
    [[ -r "$conf" ]] && . "$conf"

    local git_domain="gitea.artixlinux.org"

    GIT_URL=${GIT_URL:-"https://${git_domain}"}

    GIT_SSH=${GIT_SSH:-"gitea@${git_domain}"}

    GIT_TOKEN=${GIT_TOKEN:-''}

    TREE_DIR_ARTIX=${TREE_DIR_ARTIX:-"${WORKSPACE_DIR}/artixlinux"}

    ARTIX_TREE=(
        packages community
        packages-{gfx,media,net}
    )

    local dev_tree=(
        packages-{llvm,python,perl,java,ruby,misc}
        python-{world,galaxy,galaxy-groups,misc}
    )

    local init_tree=(packages-{openrc,runit,s6,suite66,dinit})

    local desktop_tree=(
        packages-{kf5,plasma,kde,qt5,qt6,xorg,gtk}
        packages-{lxqt,gnome,cinnamon,mate,xfce,wm,lxde}
    )

    [[ -z ${TREE_NAMES_ARTIX[*]} ]] && \
    TREE_NAMES_ARTIX=(
        packages-kernel
        "${init_tree[@]}"
        "${dev_tree[@]}"
        "${desktop_tree[@]}"
        packages-devel
        packages-lib32
    )

    ARTIX_TREE+=("${TREE_NAMES_ARTIX[@]}")

    TREE_DIR_ARCH=${TREE_DIR_ARCH:-"${WORKSPACE_DIR}/archlinux"}

    [[ -z ${ARCH_TREE[*]} ]] && \
    ARCH_TREE=(svntogit-{packages,community})

    REPOS_ROOT=${REPOS_ROOT:-"${WORKSPACE_DIR}/repos"}

    REPOS_MIRROR=${REPOS_MIRROR:-'http://mirror1.artixlinux.org/repos'}

    HOST_TREE_ARCH=${HOST_TREE_ARCH:-'https://github.com/archlinux'}

    DBEXT=${DBEXT:-'gz'}

    return 0
}

#}}}

load_pkg_config "${USER_CONF_DIR}" || load_pkg_config "${SYSCONFDIR}"

prepare_dir "${REPOS_ROOT}"
prepare_dir "${TREE_DIR_ARTIX}"
prepare_dir "${TREE_DIR_ARCH}"

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}

#!/hint/bash

##{{{ repo

shopt -s extglob

load_valid_names(){
    local conf
    conf="${DATADIR}"/valid-names.conf
    [[ -f "$conf" ]] || return 1
    # shellcheck source=/usr/share/artools/valid-names.conf
    [[ -r "$conf" ]] && . "$conf"
    return 0
}

set_arch_repos(){
    local _testing="$1" _staging="$2" _unstable="$3"
    [[ -z ${valid_names[*]} ]] && load_valid_names
    ARCH_REPOS=("${stable[@]}")
    $_testing && ARCH_REPOS+=("${gremlins[@]}")
    $_staging && ARCH_REPOS+=("${goblins[@]}")
    $_unstable && ARCH_REPOS+=("${wobble[@]}")
}

find_repo(){
    local pkg="$1" pkgarch="${2:-${CARCH}}" repo
    for r in "${ARCH_REPOS[@]}"; do
        [[ -f $pkg/repos/$r-$pkgarch/PKGBUILD ]] && repo=repos/"$r-$pkgarch"
        [[ -f $pkg/repos/$r-any/PKGBUILD ]] && repo=repos/"$r"-any
        [[ -f $pkg/$pkgarch/$r/PKGBUILD ]] && repo="$pkgarch/$r"
    done
    echo "$repo"
}

find_pkg(){
    local searchdir="$1" pkg="$2" result
    result=$(find "$searchdir" -mindepth 2 -maxdepth 2 -type d -name "$pkg")
    echo "$result"
}

tree_loop(){
    local func="$1" pkgs
    for tree in "${ARTIX_TREE[@]}"; do
        pkgs=$(find "${TREE_DIR_ARTIX}/$tree" -name "$CARCH" | sort)
        for _package in ${pkgs}; do
            "$func" "$_package"
        done
    done
}

#}}}

#!/hint/bash

#{{{ table

msg_table_header(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${BLUE} ${mesg} ${ALL_OFF}\n" "$@"
}

msg_row_yellow(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${YELLOW} ${mesg}${ALL_OFF}\n" "$@"
}

msg_row_green(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN} ${mesg}${ALL_OFF}\n" "$@"
}

msg_row(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${WHITE} ${mesg}${ALL_OFF}\n" "$@"
}

msg_row_red(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${RED} ${mesg} ${ALL_OFF}\n" "$@"
}

#}}}



#{{{ upgrades, downgrades, moves

remove_list(){
    local name="$1"
    [[ -f "${TREE_DIR_ARTIX}"/$name.list ]] && rm "${TREE_DIR_ARTIX}"/"$name".list
}

write_list(){
    local line="$1" name="$2"
    printf "%s\n" "$line" >> "${TREE_DIR_ARTIX}"/"$name".list
}

compare_m(){
    case ${artixrepo} in
        *testing*|*staging*|*rebuild)
            if [[ "${a}" == "${b}" ]]; then
                msg_row "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
            elif [[ "${a}" == 'staging' && "${b}" == 'rebuild' ]]; then
                msg_row_yellow "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
            else
                msg_row_green "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
                if [[ -n "$archrepo" ]]; then
                    write_list "${a}:${b}:$pkg" pkg_moves
                else
                    write_list "@repo@:${b}:$pkg" artix
                fi
            fi
        ;;
    esac
}

compare_u(){
    if [ "$result" -eq -1 ];then
#         local arel=${archver##*-} brel=${artixver##*-}
#         local reldiff
#         reldiff=$(( $arel-${brel%.*} ))
        msg_row_red "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
        write_list "${a}:$pkg" pkg_upgrades
    fi
}

compare_d(){
    if [ "$result" -eq 1 ];then
        if [[ -n "$archver" ]] && [[ -n "$archrepo" ]];then
            msg_row_yellow "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
        fi
    fi
}

get_archpath(){
    local pkg="$1" archpath

    for tree in "${ARCH_TREE[@]}"; do
        [[ -d ${TREE_DIR_ARCH}/$tree/$pkg/repos ]] && archpath=${TREE_DIR_ARCH}/$tree/$pkg
    done
    echo "$archpath"
}

pre_compare(){
    local func="$1" pkgpath="$2" result group pkg
    group="${pkgpath%/*}"
    group=${group##*/}
    pkg=${pkgpath##*/}

    local artixrepo archrepo pkgbuild artixver archver archpath node a b
    artixrepo=$(find_repo "$pkgpath")
    pkgbuild=$pkgpath/$artixrepo/PKGBUILD

    if [[ -f $pkgbuild ]]; then
        # shellcheck disable=1090
        . "$pkgbuild" 2>/dev/null
        artixver=$(get_full_version)
        archpath=$(get_archpath "$pkg")
        archrepo=$(find_repo "${archpath}")
        pkgbuild=$archpath/$archrepo/PKGBUILD
        node=${artixrepo%/*}
        a=${archrepo#*/} b=${artixrepo#*/}
        a="${a%-*}"

        [[ "$node" != "$CARCH" ]] && b=${b%-*}

        if [[ -f "$pkgbuild" ]]; then
            # shellcheck disable=1090
            . "$pkgbuild" 2>/dev/null
            archver=$(get_full_version)
        fi

        result=$(vercmp "$artixver" "$archver")

        "$func"

        unset epoch
    fi
}

compare_upgrades(){
    local pkgpath="${1%/*}"
    pre_compare compare_u "$pkgpath"
}

compare_downgrades(){
    local pkgpath="${1%/*}"
    pre_compare compare_d "$pkgpath"
}

compare_move(){
    local pkgpath="${1%/*}"
    pre_compare compare_m "$pkgpath"
}

#}}}

show_compare_header(){
    msg_table_header "${table}" "Arch Repo" "Artix Repo" "Package" "Arch version" "Artix version" "Group"
}

show_upgrades_table(){
    show_compare_header
    remove_list pkg_upgrades
    tree_loop compare_upgrades
}

show_downgrades_table(){
    show_compare_header
    tree_loop compare_downgrades
}

show_move_table(){
    show_compare_header
    remove_list pkg_moves
    remove_list artix
    tree_loop compare_move
}

load_makepkg_config

load_valid_names

testing=true
staging=true
unstable=false

upgrades=false
downgrades=false
move=false

readonly table="%-18s %-18s %-25s %-27s %-27s %-10s"

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -u            Show upgrade packages'
    echo '    -d            Show downgrade packages'
    echo '    -m            Show packages to move'
    echo "    -x            Don't inlcude testing packages"
    echo "    -y            Don't inlcude staging packages"
    echo '    -z            Include unstable kde and gnome'
    echo '    -h            This help'
    echo ''
    echo ''
    exit "$1"
}

opts='udmxyzh'

while getopts "${opts}" arg; do
    case "${arg}" in
        u) upgrades=true ;;
        d) downgrades=true ;;
        m) move=true ;;
        x) testing=false ;;
        y) staging=false ;;
        z) unstable=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

set_arch_repos "$testing" "$staging" "$unstable"

${move} && show_move_table

${upgrades} && show_upgrades_table

${downgrades} && show_downgrades_table
