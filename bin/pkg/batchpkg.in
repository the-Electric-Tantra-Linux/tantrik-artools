#!/bin/bash
#
# Copyright (C) 2018-20 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

m4_include(lib/util-base.sh)
m4_include(lib/util-pkg.sh)
m4_include(lib/base/message.sh)

#{{{ functions

batch_move() {
    local name="${1:-pkg_moves}"
    local pkglist="${TREE_DIR_ARTIX}"/"$name".list
    [[ -f $pkglist ]] || die "%s does not exist!" "$pkglist"
    while read -r entry; do
        local pkg=${entry##*:}
        local src=${entry%:*}
        src=${src#*:}
        local dest=${entry%%:*}
        if ${runlist}; then
            "${dest}"pkg -s "${src}" -u -p "${pkg}"
        else
            msg "%s" "${dest}pkg -s ${src} -u -p ${pkg}"
        fi
    done < "$pkglist"
}

batch_create() {
    local name="${1:-pkg_create}"
    local pkglist="${TREE_DIR_ARTIX}"/"$name".list
    [[ -f $pkglist ]] || die "%s does not exist!" "$pkglist"
    while read -r entry; do
        local pkg=${entry##*:}
        local group=${entry%:*}
        group=${group#*:}
        local team=${entry%%:*}
        if ${runlist}; then
            buildtree -n -p "${pkg}" -t "${team}" -g "${group}"
            buildtree -i -p "${pkg}"
            commitpkg -p "${pkg}"
        else
            msg "%s" "buildtree -n -p ${pkg} -t ${team} -g ${group}"
            msg2 "%s" "buildtree -i -p ${pkg}"
            msg2 "%s" "commitpkg -p ${pkg}"
        fi
    done < "$pkglist"
}

batch_update() {
    local name="${1:-pkg_upgrades}"
    local pkglist=${TREE_DIR_ARTIX}/$name.list
    [[ -f $pkglist ]] || die "%s does not exist!" "$pkglist"
    while read -r entry; do
        local pkg=${entry#*:}
        local dest=${entry%:*}
        if ${runlist}; then
            buildtree -i -p "${pkg}"
            "${dest}"pkg -u -p "${pkg}"
        else
            msg "buildtree -i -p ${pkg}"
            msg2 "${dest}pkg -u -p ${pkg}"
        fi
    done < "$pkglist"
}

#}}}

usage() {
    echo "Usage: ${0##*/} [optional listname]"
    echo '    -r                 Run generated commands'
    echo '    -c                 Create subrepos from list'
    echo '    -u                 Update subrepos from list'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit "$1"
}

runlist=false
create=false
update=false

opts='rcuh'

while getopts "${opts}" arg; do
    case "${arg}" in
        r) runlist=true ;;
        c) create=true ;;
        u) update=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

listname="$1"; shift

if ${create}; then
    batch_create "${listname}"
elif ${update}; then
    batch_update "${listname}"
else
    batch_move "${listname}"
fi
