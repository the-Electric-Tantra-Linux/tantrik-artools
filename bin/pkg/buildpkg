#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ base conf

DATADIR=${DATADIR:-'/usr/share/artools'}
SYSCONFDIR=${SYSCONFDIR:-'/etc/artools'}

if [[ -n $SUDO_USER ]]; then
    eval "USER_HOME=~$SUDO_USER"
else
    USER_HOME=$HOME
fi

USER_CONF_DIR="${XDG_CONFIG_HOME:-$USER_HOME/.config}/artools"

prepare_dir(){
    [[ ! -d $1 ]] && mkdir -p "$1"
}

load_base_config(){

    local conf="$1/artools-base.conf"

    [[ -f "$conf" ]] || return 1

    # shellcheck source=/etc/artools/artools-base.conf
    [[ -r "$conf" ]] && . "$conf"

    CHROOTS_DIR=${CHROOTS_DIR:-'/var/lib/artools'}

    WORKSPACE_DIR=${WORKSPACE_DIR:-"${USER_HOME}/artools-workspace"}

    return 0
}

#}}}

load_base_config "${USER_CONF_DIR}" || load_base_config "${SYSCONFDIR}"

prepare_dir "${WORKSPACE_DIR}"
prepare_dir "${USER_CONF_DIR}"

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}

#!/hint/bash

#{{{ common

get_makepkg_conf() {
    makepkg_conf="${DATADIR}/makepkg.conf"
    [[ -f ${USER_CONF_DIR}/makepkg.conf ]] && makepkg_conf="${USER_CONF_DIR}/makepkg.conf"
}

get_pacman_conf() {
    local repo="$1"
    pacman_conf="${DATADIR}/pacman-${repo}.conf"
    [[ -f "${USER_CONF_DIR}/pacman-${repo}.conf" ]] && pacman_conf="${USER_CONF_DIR}/pacman-${repo}.conf"
}

#}}}

#!/hint/bash

#{{{ chroot

orig_argv=("$0" "$@")
check_root() {
    local keepenv="$1"

    (( EUID == 0 )) && return
    if type -P sudo >/dev/null; then
        # shellcheck disable=2154
        exec sudo --preserve-env="$keepenv" -- "${orig_argv[@]}"
    else
        # shellcheck disable=2154
        exec su root -c "$(printf ' %q' "${orig_argv[@]}")"
    fi
}

is_btrfs() {
    [[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs ]]
}

is_subvolume() {
    [[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs && "$(stat -c %i "$1")" == 256 ]]
}

# is_same_fs() {
#     [[ "$(stat -c %d "$1")" == "$(stat -c %d "$2")" ]]
# }

subvolume_delete_recursive() {
    local subvol

    is_subvolume "$1" || return 0

    while IFS= read -d $'\0' -r subvol; do
        if ! subvolume_delete_recursive "$subvol"; then
            return 1
        fi
    done < <(find "$1" -mindepth 1 -xdev -depth -inum 256 -print0)
    if ! btrfs subvolume delete "$1" &>/dev/null; then
        error "Unable to delete subvolume %s" "$subvol"
        return 1
    fi

    return 0
}

# }}}


create_first=false
rebuild=false

mkchrootpkg_args=(-c -n)

cmd=${0##*/}
repo=${cmd#*-}
base_devel=('base-devel')
chroots_pkg="${CHROOTS_DIR}/buildpkg"
arch=$(uname -m)

usage() {
    echo "Usage: ${0##*/} [options] -- [mkchrootpkg_args]"
    echo "    -r <dir>           Create chroots in this directory"
    echo "    -d <dir>           Destination repo chroot"
    echo '    -c                 Recreate the chroot before building'
    echo '    -m                 Major rebuild'
    echo '    -N                 Disable check() function'
    echo '    -C                 Run checkpkg after built'
    echo '    -h                 This help'
    echo ''
    echo "Default mkchrootpkg_args args: ${mkchrootpkg_args[*]}"
    echo ''
    exit "$1"
}

opts='hcCNmr:d:'

while getopts "${opts}" arg; do
    case "${arg}" in
        r) chroots_pkg="$OPTARG" ;;
        d) repo="$OPTARG" ;;
        c) create_first=true ;;
        m) rebuild=true ;;
        C) mkchrootpkg_args+=(-C) ;;
        N) mkchrootpkg_args+=(-N) ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '%s'" "${arg}"; usage 1 ;;
    esac
done

if ${rebuild};then
    repo='default'
else
    case ${repo} in
        system|world|galaxy) repo='default' ;;
        lib32*) base_devel+=('multilib-devel') ;;
        galaxy-gremlins|galaxy-goblins) repo=${repo#*-} ;;
    esac
fi

get_pacman_conf "${repo}"

get_makepkg_conf

if [[ -f "${DATADIR}/setarch-aliases.d/${arch}" ]]; then
	read -r set_arch < "${DATADIR}/setarch-aliases.d/${arch}"
else
	set_arch="${arch}"
fi

check_root SOURCE_DATE_EPOCH,SRCDEST,SRCPKGDEST,PKGDEST,LOGDEST,MAKEFLAGS,PACKAGER,GNUPGHOME

mkchrootpkg_args+=("${@:$OPTIND}")

if ${create_first} || [[ ! -d "${chroots_pkg}/${repo}-${arch}" ]];then
    msg "Creating chroot for [%s] (%s)..." "${repo}" "${arch}"

    for copy in "${chroots_pkg}/${repo}-${arch}"/*; do
        [[ -d $copy ]] || continue
        msg2 "Deleting chroot copy '%s'..." "$(basename "${copy}")"

        lock 9 "$copy.lock" "Locking chroot copy '%s'" "$copy"

        subvolume_delete_recursive "${copy}"
        rm -rf --one-file-system "${copy}"
    done
    lock_close 9

    rm -rf --one-file-system "${chroots_pkg}/${repo}-${arch}"
    (umask 0022; mkdir -p "${chroots_pkg}/${repo}-${arch}")
    setarch "${set_arch}" mkchroot \
        -C "${pacman_conf}" \
        -M "${makepkg_conf}" \
        "${chroots_pkg}/${repo}-${arch}/root" \
        "${base_devel[@]}" || abort
else
    lock 9 "${chroots_pkg}/${repo}-${arch}/root.lock" "Locking clean chroot"
    chroot-run \
        -C "${pacman_conf}" \
        -M "${makepkg_conf}" \
        "${chroots_pkg}/${repo}-${arch}/root" \
        pacman -Syuu --noconfirm || abort
fi

# Always build official packages reproducibly
if [[ ! -v SOURCE_DATE_EPOCH ]]; then
    export SOURCE_DATE_EPOCH=$(date +%s)
fi

msg "Building in chroot for [%s] (%s)..." "${repo}" "${arch}"
exec mkchrootpkg -r "${chroots_pkg}/${repo}-${arch}" "${mkchrootpkg_args[@]}"
