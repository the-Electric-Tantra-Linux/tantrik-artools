#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}


set -e
shopt -s extglob

IGNORE_INTERNAL=0

if [[ $1 = "--ignore-internal" ]]; then
    IGNORE_INTERNAL=1
    shift
fi

script_mode=${BASH_SOURCE[0]##*/find-lib}

case $script_mode in
    deps|provides) true;;
    *) die "Unknown mode %s" "$script_mode" ;;
esac

if [[ -z $1 ]]; then
    echo "${0##*/} [options] <package file|extracted package dir>"
    echo "Options:"
    echo "    --ignore-internal      ignore internal libraries"
    exit 1
fi

if [[ -d $1 ]]; then
    pushd "$1" >/dev/null
else
    setup_workdir

    case ${script_mode} in
        deps) bsdtar -C "$WORKDIR" -xf "$1";;
        provides) bsdtar -C "$WORKDIR" -xf "$1" --include="*.so*";;
    esac

    pushd "$WORKDIR" >/dev/null
fi

process_sofile() {
    # extract the library name: libfoo.so
    soname="${sofile%.so?(+(.+([0-9])))}".so
    # extract the major version: 1
    soversion="${sofile##*\.so\.}"
    if [[ "$soversion" = "$sofile" ]] && ((IGNORE_INTERNAL)); then
        return
    fi
    if ! in_array "${soname}=${soversion}-${soarch}" "${soobjects[@]}"; then
        # libfoo.so=1-64
        echo "${soname}=${soversion}-${soarch}"
        soobjects+=("${soname}=${soversion}-${soarch}")
    fi
}

case $script_mode in
    deps) find_args=(-perm -u+x);;
    provides) find_args=(-name '*.so*');;
esac

find . -type f "${find_args[@]}" | while read -r filename; do
    if [[ $script_mode = "provides" ]]; then
        # ignore if we don't have a shared object
        if ! LC_ALL=C readelf -h "$filename" 2>/dev/null | grep -q '.*Type:.*DYN (Shared object file).*'; then
            continue
        fi
    fi

    # get architecture of the file; if soarch is empty it's not an ELF binary
    soarch=$(LC_ALL=C readelf -h "$filename" 2>/dev/null | sed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
    [[ -n $soarch ]] || continue

    if [[ $script_mode = "provides" ]]; then
        # get the string binaries link to: libfoo.so.1.2 -> libfoo.so.1
        sofile=$(LC_ALL=C readelf -d "$filename" 2>/dev/null | sed -n 's/.*Library soname: \[\(.*\)\].*/\1/p')
        [[ -z $sofile ]] && sofile="${filename##*/}"
        process_sofile
    elif [[ $script_mode = "deps" ]]; then
        # process all libraries needed by the binary
        for sofile in $(LC_ALL=C readelf -d "$filename" 2>/dev/null | sed -nr 's/.*Shared library: \[(.*)\].*/\1/p'); do
            process_sofile
        done
    fi
done

popd >/dev/null
