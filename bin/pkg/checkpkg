#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash

#{{{ message

#set +u +o posix

# shellcheck disable=1091
. /usr/share/makepkg/util.sh

export LANG=C

shopt -s extglob

if [[ -t 2 && "$TERM" != dumb ]]; then
    colorize
else
    # shellcheck disable=2034
    declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
    # shellcheck disable=2059
    printf "${BOLD}done${ALL_OFF}\n" >&2
}

lock_close() {
	local fd=$1
	exec {fd}>&-
}

lock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -n "$1"; then
        stat_busy "$3"
        flock "$1"
        stat_done
    fi
}

slock() {
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi
    if ! flock -sn "$1"; then
        stat_busy "$3"
        flock -s "$1"
        stat_done
    fi
}

_setup_workdir=false
setup_workdir() {
    [[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
    _setup_workdir=true
    trap 'trap_abort' INT QUIT TERM HUP
    trap 'trap_exit' EXIT
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    local r=$?
    trap - EXIT INT QUIT TERM HUP
    cleanup $r
}

cleanup() {
    if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
        rm -rf "$WORKDIR"
    fi
    exit "${1:-0}"
}

abort() {
    error 'Aborting...'
    cleanup 255
}

die() {
    (( $# )) && error "$@"
    cleanup 255
}

#}}}


shopt -s extglob

load_makepkg_config

#{{{ functions

pkgver_equal() {
    if [[ $1 = *-* && $2 = *-* ]]; then
        # if both versions have a pkgrel, then they must be an exact match
        [[ $1 = "$2" ]]
    else
        # otherwise, trim any pkgrel and compare the bare version.
        [[ ${1%%-*} = "${2%%-*}" ]]
    fi
}

find_cached_package() {
    local searchdirs=("$PKGDEST" "$PWD") results=()
    local targetname=$1 targetver=$2 targetarch=$3
    local dir pkg pkgbasename name ver rel arch r results

    for dir in "${searchdirs[@]}"; do
        [[ -d $dir ]] || continue

        for pkg in "$dir"/*.pkg.tar?(.!(sig|*.*)); do
            [[ -f $pkg ]] || continue

            # avoid adding duplicates of the same inode
            for r in "${results[@]}"; do
                [[ $r -ef $pkg ]] && continue 2
            done

            # split apart package filename into parts
            pkgbasename=${pkg##*/}
            pkgbasename=${pkgbasename%.pkg.tar*}

            arch=${pkgbasename##*-}
            pkgbasename=${pkgbasename%-"$arch"}

            rel=${pkgbasename##*-}
            pkgbasename=${pkgbasename%-"$rel"}

            ver=${pkgbasename##*-}
            name=${pkgbasename%-"$ver"}

            if [[ $targetname = "$name" && $targetarch = "$arch" ]] &&
                pkgver_equal "$targetver" "$ver-$rel"; then
                results+=("$pkg")
            fi
        done
    done

    case ${#results[*]} in
        0)
            return 1
        ;;
        1)
            printf '%s\n' "${results[0]}"
            return 0
        ;;
        *)
            error 'Multiple packages found:'
            printf '\t%s\n' "${results[@]}" >&2
            return 1
        ;;
    esac
}

#}}}

usage() {
    cat <<- _EOF_
        Usage: ${BASH_SOURCE[0]##*/} [OPTIONS]

        Searches for a locally built package corresponding to the PKGBUILD, and
        downloads the last version of that package from the Pacman repositories.
        It then compares the list of .so files provided by each version of the
        package and outputs if there are soname differences for the new package.
        A directory is also created using mktemp with files containing a file
        list for both packages and a library list for both packages.

        OPTIONS
            -r, --rmdir     Remove the temporary directory
            -w, --warn      Print a warning in case of differences
            -h, --help      Show this help text
_EOF_
}

RMDIR=0
WARN=0

OPT_SHORT='rwh'
OPT_LONG=('rmdir' 'warn' 'help')
if ! parseopts "$OPT_SHORT" "${OPT_LONG[@]}" -- "$@"; then
    exit 1
fi
set  -- "${OPTRET[@]}"

while :; do
    case $1 in
        -r|--rmdir)
            RMDIR=1
            ;;
        -w|--warn)
            WARN=1
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift; break
            ;;
    esac
    shift
done

if [[ ! -f PKGBUILD ]]; then
    die 'This must be run in the directory of a built package.'
fi

# shellcheck source=PKGBUILD.proto
. ./PKGBUILD
if [[ ${arch[0]} == 'any' ]]; then
    CARCH='any'
fi

STARTDIR=$(pwd)
(( RMDIR )) && trap 'rm -rf $TEMPDIR' EXIT INT TERM QUIT
TEMPDIR=$(mktemp -d --tmpdir checkpkg-script.XXXX)

for _pkgname in "${pkgname[@]}"; do
    comparepkg=$_pkgname
    pkgurl=
    target_pkgver=$(get_full_version "$_pkgname")
    if ! pkgfile=$(find_cached_package "$_pkgname" "$target_pkgver" "$CARCH"); then
        die 'tarball not found for package: %s' "${_pkgname}-$target_pkgver"
    fi

    ln -s "$pkgfile" "$TEMPDIR"

    if (( $# )); then
        case $1 in
            /*|*/*)
                pkgurl=file://$(readlink -m "$1") ;;
            *.pkg.tar*)
                pkgurl=$1 ;;
            '')
                ;;
            *)
                comparepkg=$1 ;;
        esac
        shift
    fi
    [[ -n $pkgurl ]] || pkgurl=$(pacman -Spdd --print-format '%l' --noconfirm "$comparepkg") ||
        die "Couldn't download previous package for %s." "$comparepkg"

    oldpkg=${pkgurl##*/}

    if [[ ${oldpkg} = "${pkgfile##*/}" ]]; then
        die "The built package (%s) is the one in the repo right now!" "$_pkgname"
    fi

    if [[ $pkgurl = file://* || ( $pkgurl = /* && -f $pkgurl ) ]]; then
        ln -s "${pkgurl#file://}" "$TEMPDIR/$oldpkg"
    elif [[ -f "$PKGDEST/$oldpkg" ]]; then
        ln -s "$PKGDEST/$oldpkg" "$TEMPDIR/$oldpkg"
    elif [[ -f "$STARTDIR/$oldpkg" ]]; then
        ln -s "$STARTDIR/$oldpkg" "$TEMPDIR/$oldpkg"
    else
        curl -fsLC - --retry 3 --retry-delay 3 -o "$TEMPDIR/$oldpkg" "$pkgurl"
    fi

    bsdtar tf "$TEMPDIR/$oldpkg" | sort > "$TEMPDIR/filelist-$_pkgname-old"
    bsdtar tf "$pkgfile" | sort > "$TEMPDIR/filelist-$_pkgname"

    sdiff -s "$TEMPDIR/filelist-$_pkgname-old" "$TEMPDIR/filelist-$_pkgname"

    find-libprovides "$TEMPDIR/$oldpkg" 2>/dev/null | sort > "$TEMPDIR/libraries-$_pkgname-old"
    find-libprovides "$pkgfile" 2>/dev/null | sort > "$TEMPDIR/libraries-$_pkgname"
    if ! diff_output="$(sdiff -s "$TEMPDIR/libraries-$_pkgname-old" "$TEMPDIR/libraries-$_pkgname")"; then
        message="Sonames differ in $_pkgname!"
        (( WARN )) && warning "$message" || msg "$message"
        echo "$diff_output"
    else
        msg "No soname differences for %s." "$_pkgname"
    fi
done

(( RMDIR )) || msg "Files saved to %s" "$TEMPDIR"
