#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

m4_include(lib/util-base.sh)
m4_include(lib/util-pkg.sh)
m4_include(lib/base/message.sh)
m4_include(lib/pkg/repo.sh)
m4_include(lib/pkg/table.sh)

#{{{ db libs

extract_db() {
    local u="$1" cdir="$2"
    rm -rf "$cdir"
    mkdir -p "$cdir"
    msg2 "%s" "${cdir##*/}"
    curl -L -s "$u" | bsdtar -xf - -C "$cdir"
}

update_db_cache(){
    msg "Updating database cache ..."
    local cachedir url
    for repo in "${searchrepos[@]}"; do
        cachedir=${db_cache_dir}/linksdb/$repo
        url=${REPOS_MIRROR}/$repo/os/${CARCH}/$repo.${linksdb_ext}
        extract_db "$url" "$cachedir"
    done
    msg "Done"
}

#}}}

#{{{ sogrep

query_db() {
    for repo in "${searchrepos[@]}"; do
        local db
        db=${db_cache_dir}/linksdb/$repo/
        if [[ -d ${db} ]]; then
            while read -rd '' pkg; do
                read -r match
                pkg=${pkg#${db}}
                pkg="${pkg%/*}"
                msg_row "${tableQ}" "$repo" "$pkg" "${match}"
            done < <(grep -rZ "$library" "$db") | sort -u
        fi
    done
}

#}}}

#{{{ check db

is_db_entry() {
    local pkgname="$1" repo="${REPOS[$2]}" entry
    entry=${db_cache_dir}/linksdb/$repo/$pkgname

    if [[ -d "$entry" ]];then
        return 0
    fi
    return 1
}

check_db(){
    local pkgpath="${1}"

    for repo in "${!REPOS[@]}"; do

        local pkgbuild artixver
        if [[ -f $pkgpath/$repo/PKGBUILD ]]; then
            pkgbuild=$pkgpath/$repo/PKGBUILD

            # shellcheck disable=1090
            . "$pkgbuild" 2>/dev/null
            artixver=$(get_full_version)
            for name in "${pkgname[@]}"; do
                if ! is_db_entry "$name-$artixver" "$repo"; then
                    msg_row_red "${tableU}" "$repo" "$name" "$artixver" "false"
                else
                    ${all_db} && msg_row "${tableU}" "$repo" "$name" "$artixver" "true"
                fi
            done
            unset artixver pkgbuild pkgver epoch pkgname pkgbase
        fi
    done
}

#}}}

# {{{ check obsolete

show_obsolete_table() {
    local arch_mirror='https://mirror.f4st.host/archlinux'

    local arch_repo artix_repo artix_db arch_db url
    arch_repo="${searchrepos[@]}"
    artix_repo="${REPOS[$arch_repo]}"

    artix_db="${db_cache_dir}/artixdb/${artix_repo}"
    arch_db="${db_cache_dir}/archdb/${arch_repo}"

    msg "Updating database cache ..."
    url=${REPOS_MIRROR}/${artix_repo}/os/$CARCH/${artix_repo}.${db_ext}
    extract_db "$url" "${artix_db}"

    url=${arch_mirror}/${arch_repo}/os/$CARCH/${arch_repo}.${db_ext}
    extract_db "$url" "${arch_db}"
    msg "Done"

    msg_table_header "${tableQ}" "Repo" "Package" "Obsolete"
    for p in "${artix_db}"/*; do
        local pkg rel
        pkg=${p##*/}
        rel=${pkg##*-}
        rel=${rel%.*}
        pkg=${pkg%-*}
        local p="$pkg-$rel"

        if [[ "$p" != *openrc* ]] && [[ "$p" != *runit* ]] \
        && [[ "$p" != *s6* ]] && [[ "$p" != *suite66* ]] \
        && [[ "$p" != *udev* ]] && [[ "$p" != *elogind* ]] \
        && [[ "$p" != *sysusers* ]] && [[ "$p" != *tmpfiles* ]] \
        && [[ "$p" != *execline* ]] && [[ "$p" != *skalibs* ]] \
        && [[ "$p" != *netifrc* ]] && [[ "$p" != *bootlogd* ]] \
        && [[ "$p" != *pam_rundir* ]] && [[ "$p" != *artools* ]] \
        && [[ "$p" != *archlinux* ]] && [[ "$p" != *iso-profiles* ]] \
        && [[ "$p" != *calamares* ]] && [[ "$p" != *iso-initcpio* ]] \
        && [[ "$p" != *dinit* ]] && [[ "$p" != *artix* ]] && [[ "$p" != *blocaled* ]]; then
            if [[ ! -d "${arch_db}/$p" ]]; then
                msg_row "${tableQ}" "${artix_repo}" "$p" "true"
            fi
        fi
    done
}

#}}}

show_lib_table() {
    msg_table_header "${tableQ}" "Repo" "Package" "Library"
    query_db
}

show_db_table(){
    msg_table_header "${tableU}" "Repo" "Package" "Version" "Database"
    tree_loop check_db
}

db_cache_dir="${XDG_CACHE_HOME:-$USER_HOME/.cache}/artools"

linksdb_ext="links.tar.${DBEXT}"
db_ext="db.tar.${DBEXT}"

load_makepkg_config

sync=false
check=false
query=false
all_db=false
obsolete=false

readonly tableU="%-20s %-35s %-30s %-10s"
readonly tableQ="%-20s %-55s %s"

load_valid_names

#{{{ repo names arrays

declare -A REPOS=(
    [${valid_names[0]}]=system
    [${valid_names[1]}]=world
    [${valid_names[2]}]=galaxy
    [${valid_names[3]}]=lib32
    [${valid_names[4]}]=gremlins
    [${valid_names[5]}]=galaxy-gremlins
    [${valid_names[6]}]=lib32-gremlins
    [${valid_names[7]}]=goblins
    [${valid_names[8]}]=galaxy-goblins
    [${valid_names[9]}]=lib32-goblins
    [${valid_names[11]}]=kde-wobble
    [${valid_names[12]}]=gnome-wobble
)

searchrepos=(
    "${REPOS[${valid_names[11]}]}"
    "${REPOS[${valid_names[12]}]}"
    "${REPOS[${valid_names[7]}]}"
    "${REPOS[${valid_names[8]}]}"
    "${REPOS[${valid_names[9]}]}"
    "${REPOS[${valid_names[4]}]}"
    "${REPOS[${valid_names[5]}]}"
    "${REPOS[${valid_names[6]}]}"
    "${REPOS[${valid_names[0]}]}"
    "${REPOS[${valid_names[1]}]}"
    "${REPOS[${valid_names[2]}]}"
    "${REPOS[${valid_names[3]}]}"
)

#}}}

usage() {
    echo "Usage: ${0##*/} [options] (with -q [libname])"
    echo '    -r <repo>     Repo name to query'
    echo '                  [default: all]'
    echo "    -s            Sync repo databases"
    echo '    -c            Check repos'
    echo '    -a            Show repo db (-c)'
    echo '    -o            Check for obsolete packages'
    echo "    -q            Query repo databases for so libs"
    echo '    -h            This help'
    echo ''
    echo ''
    exit "$1"
}

opts='r:qcsaoh'

while getopts "${opts}" arg; do
    case "${arg}" in
        r) searchrepos=("$OPTARG") ;;
        s) sync=true ;;
        c) check=true ;;
        a) all_db=true ;;
        q) query=true ;;
        o) obsolete=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

library="$1"; shift

${sync} && update_db_cache

${check} && show_db_table

${query} && show_lib_table

${obsolete} && show_obsolete_table
